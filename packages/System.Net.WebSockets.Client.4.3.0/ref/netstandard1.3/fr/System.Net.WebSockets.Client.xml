<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.WebSockets.Client</name>
  </assembly>
  <members>
    <member name="T:System.Net.WebSockets.ClientWebSocket">
      <summary>Fournit un client pour la connexion aux services de WebSocket.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.#ctor">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.Abort">
      <summary>Abandonne la connexion et annule toutes les opérations d'E/S en attente.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Ferme l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" /> sous forme d'opération asynchrone.</summary>
      <returns>retourne <see cref="T:System.Threading.Tasks.Task" /> ;Objet de tâche représentant l'opération asynchrone.</returns>
      <param name="closeStatus">État fermé de WebSocket.</param>
      <param name="statusDescription">Description du statut de fermeture.</param>
      <param name="cancellationToken">Jeton d'annulation qui peut être utilisé pour propager la notification indiquant que cette opération doit être annulée.</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Ferme la sortie de l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" /> en tant qu'opération asynchrone.</summary>
      <returns>retourne <see cref="T:System.Threading.Tasks.Task" /> ;Objet de tâche représentant l'opération asynchrone.</returns>
      <param name="closeStatus">État fermé de WebSocket.</param>
      <param name="statusDescription">Description du statut de fermeture.</param>
      <param name="cancellationToken">Jeton d'annulation qui peut être utilisé pour propager la notification indiquant que cette opération doit être annulée.</param>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatus">
      <summary>Obtient la raison pour laquelle le protocole de transfert de fermeture a été initié sur l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</summary>
      <returns>retourne <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" /> ;Raison pour laquelle le protocole de transfert de fermeture a été initié.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription">
      <summary>Obtient une description de la raison de la fermeture de l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</summary>
      <returns>retourne <see cref="T:System.String" /> ;Description de la raison de la fermeture de l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>Établit une connexion avec un serveur de WebSocket en tant qu'opération asynchrone.</summary>
      <returns>retourne <see cref="T:System.Threading.Tasks.Task" /> ;Objet de tâche représentant l'opération asynchrone.</returns>
      <param name="uri">URI du serveur WebSocket auquel se connecter.</param>
      <param name="cancellationToken">Jeton d'annulation qui peut être utilisé pour propager la notification indiquant que l'opération doit être annulée.</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.Dispose">
      <summary>Libère les ressources non managées utilisées par l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</summary>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.Options">
      <summary>Obtient les options de WebSocket pour l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</summary>
      <returns>retourne <see cref="T:System.Net.WebSockets.ClientWebSocketOptions" /> ;Options de WebSocket pour l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
      <summary>Reçoit les données sur <see cref="T:System.Net.WebSockets.ClientWebSocket" /> en tant qu'opération asynchrone.</summary>
      <returns>retourne <see cref="T:System.Threading.Tasks.Task`1" /> ;Objet de tâche représentant l'opération asynchrone.</returns>
      <param name="buffer">Mémoire tampon pour recevoir la réponse.</param>
      <param name="cancellationToken">Jeton d'annulation qui peut être utilisé pour propager la notification indiquant que cette opération doit être annulée.</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>Envoie les données sur <see cref="T:System.Net.WebSockets.ClientWebSocket" /> comme une opération asynchrone.</summary>
      <returns>retourne <see cref="T:System.Threading.Tasks.Task" /> ;Objet de tâche représentant l'opération asynchrone.</returns>
      <param name="buffer">Mémoire tampon contenant le message à envoyer.</param>
      <param name="messageType">Spécifie si la mémoire tampon est en texte clair ou au format binaire.</param>
      <param name="endOfMessage">Spécifie s'il s'agit de l'envoi asynchrone final.Défini sur true s'il s'agit du dernier envoi, sinon sur false.</param>
      <param name="cancellationToken">Jeton d'annulation qui peut être utilisé pour propager la notification indiquant que cette opération doit être annulée.</param>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.State">
      <summary>Obtient l'état de WebSocket de l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</summary>
      <returns>retourne <see cref="T:System.Net.WebSockets.WebSocketState" /> ;État de WebSocket de l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.SubProtocol">
      <summary>Obtient le sous-protocole WebSocket pris en charge pour l'instance <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</summary>
      <returns>retourne <see cref="T:System.String" /> ;Sub-protocole WebSocket pris en charge.</returns>
    </member>
    <member name="T:System.Net.WebSockets.ClientWebSocketOptions">
      <summary>Options à utiliser avec un objet <see cref="T:System.Net.WebSockets.ClientWebSocket" />.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.AddSubProtocol(System.String)">
      <summary>Ajoute un sous-protocole devant être négocié pendant la négociation de connexion WebSocket.</summary>
      <param name="subProtocol">Sous-protocole WebSocket à ajouter.</param>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.ClientCertificates">
      <summary>Obtient ou définit une collection de certificats côté client.</summary>
      <returns>retourne <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> ;Collection de certificats côté client.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Cookies">
      <summary>Obtient ou définit les cookies associés à la requête.</summary>
      <returns>retourne <see cref="T:System.Net.CookieContainer" /> ;Cookies associés à la requête.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Credentials">
      <summary>Obtient ou définit les informations d'identification du client.</summary>
      <returns>retourne <see cref="T:System.Net.ICredentials" /> ;Informations d'identification du client.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.KeepAliveInterval">
      <summary>Obtient ou définit l'intervalle pendant lequel maintenir l'activité du protocole WebSocket en millisecondes.</summary>
      <returns>retourne <see cref="T:System.TimeSpan" /> ;Intervalle, en millisecondes, pendant lequel maintenir l'activité du protocole WebSocket.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Proxy">
      <summary>Obtient ou définit le proxy des requête WebSocket.</summary>
      <returns>retourne <see cref="T:System.Net.IWebProxy" /> ;Proxy pour les demandes WebSocket.</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.SetRequestHeader(System.String,System.String)">
      <summary>Crée un en-tête de demande HTTP et sa valeur.</summary>
      <param name="headerName">Nom de l'en-tête HTTP.</param>
      <param name="headerValue">Valeur de l'en-tête HTTP.</param>
    </member>
  </members>
</doc>