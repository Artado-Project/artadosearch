<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.SqlClient</name>
  </assembly>
  <members>
    <member name="T:Microsoft.SqlServer.Server.SqlDataRecord">
      <summary>表示单个数据行及其元数据。此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.#ctor(Microsoft.SqlServer.Server.SqlMetaData[])">
      <summary>使用基于作为参数传递的 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象的数组的架构，初始化新的 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 实例。</summary>
      <param name="metaData">对 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 中的每一列进行描述的 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metaData" /> 为 null。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount">
      <summary>获取数据行的列数。此属性为只读。</summary>
      <returns>数据行的列数，其形式为整数。</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetBoolean(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Boolean" />。</summary>
      <returns>形式为 <see cref="T:System.Boolean" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetByte(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Byte" />。</summary>
      <returns>形式为 <see cref="T:System.Byte" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Byte" /> 对象的数组。</summary>
      <returns>已复制的字节数。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="fieldOffset">开始检索字节的字段值偏移量。</param>
      <param name="buffer">要将字节复制到的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字节的缓冲区偏移量。</param>
      <param name="length">复制到缓冲区的字节数。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetChar(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Char" />。</summary>
      <returns>形式为 <see cref="T:System.Char" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Char" /> 对象的数组。</summary>
      <returns>已复制的字符数。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="fieldOffset">开始检索字符的字段值偏移量。</param>
      <param name="buffer">要将字符复制到的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字符的缓冲区偏移量。</param>
      <param name="length">复制到缓冲区的字符数。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDataTypeName(System.Int32)">
      <summary>返回序号参数所指定的列的数据类型名称。</summary>
      <returns>包含列的数据类型的 <see cref="T:System.String" />。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDateTime(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.DateTime" />。</summary>
      <returns>形式为 <see cref="T:System.DateTime" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDateTimeOffset(System.Int32)">
      <summary>将指定列的数据作为 <see cref="T:System.DateTimeOffset" /> 返回。</summary>
      <returns>指定列的值，为 <see cref="T:System.DateTimeOffset" /> 形式。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDecimal(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Decimal" />。</summary>
      <returns>形式为 <see cref="T:System.Decimal" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetDouble(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Double" />。</summary>
      <returns>形式为 <see cref="T:System.Double" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetFieldType(System.Int32)">
      <summary>返回一个 <see cref="T:System.Type" /> 对象，该对象表示映射到 <paramref name="ordinal" /> 参数所指定的列的 SQL Server 类型的公共语言运行时 (CLR) 类型。</summary>
      <returns>形式为 <see cref="T:System.Type" /> 对象的列类型。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.TypeLoadException">该列属于用户定义类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该列属于用户定义类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetFloat(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 float。</summary>
      <returns>形式为 float 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetGuid(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Guid" />。</summary>
      <returns>形式为 <see cref="T:System.Guid" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt16(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Int16" />。</summary>
      <returns>形式为 <see cref="T:System.Int16" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt32(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Int32" />。</summary>
      <returns>形式为 <see cref="T:System.Int32" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetInt64(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Int64" />。</summary>
      <returns>形式为 <see cref="T:System.Int64" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">由 <paramref name="ordinal" /> 指定的列为空。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetName(System.Int32)">
      <summary>返回序号参数所指定的列的名称。</summary>
      <returns>包含列名称的 <see cref="T:System.String" />。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetOrdinal(System.String)">
      <summary>返回列名称所指定的列序号。</summary>
      <returns>列的从零开始的序号，其形式为整数。</returns>
      <param name="name">要查找的列名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">未能找到列名称。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBinary(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBoolean(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlByte(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlBytes(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlBytes" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlChars(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlChars" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDateTime(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDecimal(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlDouble(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlFieldType(System.Int32)">
      <summary>返回一个 <see cref="T:System.Type" /> 对象，该对象表示映射到列的 SQL Server 类型的类型，其形式为 <see cref="N:System.Data.SqlTypes" /> 中定义的 SQL Server 类型。</summary>
      <returns>形式为 <see cref="T:System.Type" /> 对象的列类型。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.TypeLoadException">该列属于用户定义类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该列属于用户定义类型，不可用于调用应用程序域。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlGuid(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt16(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt32(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlInt64(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlMetaData(System.Int32)">
      <summary>返回一个 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象，该对象描述列序号所指定的列的元数据。</summary>
      <returns>形式为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 对象的列元数据。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlMoney(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlSingle(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlString(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlString" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlValue(System.Int32)">
      <summary>返回存储在列序号所指定的列中的数据值，数据值表示为 SQL Server 类型。</summary>
      <returns>形式为 <see cref="T:System.Object" /> 的列值，表示为 SQL Server 类型。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlValues(System.Object[])">
      <summary>将记录中所有列的值返回到一个数组中，这些值表示为 SQL Server 类型。</summary>
      <returns>一个指示复制的列数的 <see cref="T:System.Int32" />。</returns>
      <param name="values">要将列值复制到其中的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetSqlXml(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.Data.SqlTypes.SqlXml" />。</summary>
      <returns>形式为 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetString(System.Int32)">
      <summary>获取序号所指定的列的值，其形式为 <see cref="T:System.String" />。</summary>
      <returns>形式为 <see cref="T:System.String" /> 的列值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetTimeSpan(System.Int32)">
      <summary>将指定列的数据作为 <see cref="T:System.TimeSpan" /> 返回。</summary>
      <returns>指定列的值，为 <see cref="T:System.TimeSpan" /> 形式。</returns>
      <param name="ordinal">从零开始的列序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetValue(System.Int32)">
      <summary>返回序号参数所指定的列的公共语言运行时 (CLR) 类型值。</summary>
      <returns>ordinal 所指定的列的 CLR 类型值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.GetValues(System.Object[])">
      <summary>将记录中所有列的值返回到一个数组中，这些值表示为公共语言运行时 (CLR) 类型。</summary>
      <returns>一个指示复制的列数的 <see cref="T:System.Int32" />。</returns>
      <param name="values">要将列值复制到其中的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">类型不匹配。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.IsDBNull(System.Int32)">
      <summary>如果列序号参数所指定的列为空，则返回 true。</summary>
      <returns>如果列为空，则为 true；否则为 false。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.Item(System.Int32)">
      <summary>获取列 <paramref name="ordinal" /> 参数所指定的列的公共语言运行时 (CLR) 类型值。</summary>
      <returns>
        <paramref name="ordinal" /> 所指定的列的 CLR 类型值。</returns>
      <param name="ordinal">列的从零开始的序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlDataRecord.Item(System.String)">
      <summary>获取列 <paramref name="name" /> 参数所指定的列的公共语言运行时 (CLR) 类型值。</summary>
      <returns>
        <paramref name="name" /> 所指定的列的 CLR 类型值。</returns>
      <param name="name">列的名称。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Byte" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Byte" /> 值数组。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="fieldOffset">开始复制字节的字段值偏移量。</param>
      <param name="buffer">要从其中复制字节的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字节的缓冲区偏移量。</param>
      <param name="length">要从缓冲区复制的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetChar(System.Int32,System.Char)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Char" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Char" /> 值数组。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="fieldOffset">开始复制字符的字段值偏移量。</param>
      <param name="buffer">要从其中复制字符的目标缓冲区。</param>
      <param name="bufferOffset">开始复制字符的缓冲区偏移量。</param>
      <param name="length">要从缓冲区复制的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDateTimeOffset(System.Int32,System.DateTimeOffset)">
      <summary>将指定列的值设置为 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDBNull(System.Int32)">
      <summary>将指定列中的值设置为 <see cref="T:System.DBNull" />。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>将列中存储的数据设置为指定的 float 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Guid" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Int16" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Int32" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Int64" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBinary(System.Int32,System.Data.SqlTypes.SqlBinary)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBoolean(System.Int32,System.Data.SqlTypes.SqlBoolean)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlByte(System.Int32,System.Data.SqlTypes.SqlByte)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlBytes(System.Int32,System.Data.SqlTypes.SqlBytes)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlChars(System.Int32,System.Data.SqlTypes.SqlChars)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDateTime(System.Int32,System.Data.SqlTypes.SqlDateTime)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDecimal(System.Int32,System.Data.SqlTypes.SqlDecimal)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlDouble(System.Int32,System.Data.SqlTypes.SqlDouble)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlGuid(System.Int32,System.Data.SqlTypes.SqlGuid)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt16(System.Int32,System.Data.SqlTypes.SqlInt16)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt32(System.Int32,System.Data.SqlTypes.SqlInt32)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlInt64(System.Int32,System.Data.SqlTypes.SqlInt64)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlMoney(System.Int32,System.Data.SqlTypes.SqlMoney)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlSingle(System.Int32,System.Data.SqlTypes.SqlSingle)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlString(System.Int32,System.Data.SqlTypes.SqlString)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetSqlXml(System.Int32,System.Data.SqlTypes.SqlXml)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetString(System.Int32,System.String)">
      <summary>将列中存储的数据设置为指定的 <see cref="T:System.String" /> 值。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetTimeSpan(System.Int32,System.TimeSpan)">
      <summary>将指定列的值设置为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传入的 <paramref name="ordinal" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">传入的 <see cref="T:System.TimeSpan" /> 值的长度大于 24 小时。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetValue(System.Int32,System.Object)">
      <summary>为列序号所指定的列设置一个新值，这些值表示为公共语言运行时 (CLR) 类型。</summary>
      <param name="ordinal">列的从零开始的序号。</param>
      <param name="value">指定列的新值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ordinal" /> 小于 0 或大于列数（即 <see cref="P:Microsoft.SqlServer.Server.SqlDataRecord.FieldCount" />）。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlDataRecord.SetValues(System.Object[])">
      <summary>为 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 中所有列设置新值。这些值表示为公共语言运行时 (CLR) 类型。</summary>
      <returns>设置为整数的列值数。</returns>
      <param name="values">
        <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 实例的新值数组，这些值表示为装箱为 <see cref="T:System.Object" /> 引用的 CLR 类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">值的数目与 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 实例中的列数不匹配。</exception>
    </member>
    <member name="T:Microsoft.SqlServer.Server.SqlMetaData">
      <summary>从 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象的参数和列指定和检索元数据信息。此类不能被继承。</summary>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType)">
      <summary>使用指定的列名称和类型初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称和默认服务器初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Byte,System.Byte)">
      <summary>使用指定的列名称、类型、精度和小数位数初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">参数或列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数，或者 <paramref name="scale" /> 大于 <paramref name="precision" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、精度、小数位数和服务器默认值初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64)">
      <summary>使用指定的列名称、类型和最大长度初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、最大长度和服务器默认值初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Byte,System.Byte,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Type)">
      <summary>使用指定的列名称、类型、最大长度、精度、小数位数、区域设置 ID、比较选项和用户定义的类型 (UDT) 初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="userDefinedType">一个指向该 UDT 的 <see cref="T:System.Type" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数，或者 <paramref name="userDefinedType" /> 指向了未声明 <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> 的类型。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Byte,System.Byte,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Type,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、最大长度、精度、小数位数、区域设置 ID、比较选项和用户定义的类型 (UDT) 初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="precision">参数或列的精度。</param>
      <param name="scale">参数或列的小数位数。</param>
      <param name="localeId">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="userDefinedType">一个指向该 UDT 的 <see cref="T:System.Type" /> 实例。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Int64,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>使用指定的列名称、类型、最大长度、区域设置和比较选项初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">参数或列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.Int64,System.Int64,System.Data.SqlTypes.SqlCompareOptions,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、类型、最大长度、区域设置、比较选项和服务器默认值初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="maxLength">指定类型的最大长度。</param>
      <param name="locale">参数或列的区域设置 ID。</param>
      <param name="compareOptions">参数或列的比较规则。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.String,System.String,System.String)">
      <summary>使用指定的列名称、类型、数据库名称、所属架构和对象名称初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="database">类型化 XML 实例的 XML 架构集合的数据库名称。</param>
      <param name="owningSchema">类型化 XML 实例的 XML 架构集合的关系架构名称。</param>
      <param name="objectName">类型化 XML 实例的 XML 架构集合的名称。</param>
      <exception cref="T:System.ArgumentNullException">当 <paramref name="database" /> 和 <paramref name="owningSchema" /> 不为 null 时，<paramref name="Name" /> 为 null，或 <paramref name="objectName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不允许的 SqlDbType 作为 <paramref name="dbType" /> 传递给了构造函数。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.#ctor(System.String,System.Data.SqlDbType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SortOrder,System.Int32)">
      <summary>使用指定的列名称、数据库名称、所属架构、对象名称和默认服务器初始化 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类的新实例。这种形式的构造函数通过允许指定表值参数中的列是否唯一、列的排序顺序和列排序的序号，支持表值参数。</summary>
      <param name="name">列的名称。</param>
      <param name="dbType">参数或列的 SQL Server 类型。</param>
      <param name="database">类型化 XML 实例的 XML 架构集合的数据库名称。</param>
      <param name="owningSchema">类型化 XML 实例的 XML 架构集合的关系架构名称。</param>
      <param name="objectName">类型化 XML 实例的 XML 架构集合的名称。</param>
      <param name="useServerDefault">指定此列是否应使用默认服务器值。</param>
      <param name="isUniqueKey">指定表值参数中的列是否唯一。</param>
      <param name="columnSortOrder">指定列的排序顺序。</param>
      <param name="sortOrdinal">指定列排序的序号。</param>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Boolean)">
      <summary>根据元数据验证指定的 <see cref="T:System.Boolean" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Boolean" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Byte)">
      <summary>根据元数据验证指定的 <see cref="T:System.Byte" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Byte" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Byte[])">
      <summary>根据元数据验证指定的 <see cref="T:System.Byte" /> 值的数组，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Byte" /> 值的数组的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Char)">
      <summary>根据元数据验证指定的 <see cref="T:System.Char" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Char" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Char[])">
      <summary>根据元数据验证指定的 <see cref="T:System.Char" /> 值的数组，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Char" /> 值的数组的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBinary)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBoolean)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlByte)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlBytes)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlChars)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDateTime)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDecimal)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlDouble)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlGuid)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt16)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt32)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlInt64)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlMoney)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlSingle)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlString)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlString" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Data.SqlTypes.SqlXml)">
      <summary>根据元数据验证指定的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.DateTime)">
      <summary>根据元数据验证指定的 <see cref="T:System.DateTime" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.DateTime" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.DateTimeOffset)">
      <summary>根据元数据验证指定的 <see cref="T:System.DateTimeOffset" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.DateTimeOffset" /> 值的数组的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Decimal)">
      <summary>根据元数据验证指定的 <see cref="T:System.Decimal" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Decimal" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Double)">
      <summary>根据元数据验证指定的 <see cref="T:System.Double" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Double" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Guid)">
      <summary>根据元数据验证指定的 <see cref="T:System.Guid" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Guid" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int16)">
      <summary>根据元数据验证指定的 <see cref="T:System.Int16" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Int16" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int32)">
      <summary>根据元数据验证指定的 <see cref="T:System.Int32" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Int32" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Int64)">
      <summary>根据元数据验证指定的 <see cref="T:System.Int64" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Int64" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Object)">
      <summary>根据元数据验证指定的 <see cref="T:System.Object" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Object" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.Single)">
      <summary>根据元数据验证指定的 <see cref="T:System.Single" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.Single" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.String)">
      <summary>根据元数据验证指定的 <see cref="T:System.String" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.String" /> 的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.Adjust(System.TimeSpan)">
      <summary>根据元数据验证指定的 <see cref="T:System.TimeSpan" /> 值，并在需要时调整该值。</summary>
      <returns>作为 <see cref="T:System.TimeSpan" /> 值的数组的调整后的值。</returns>
      <param name="value">要根据 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例进行验证的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Value" /> 与 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 类型不匹配，或者未能调整 <paramref name="value" />。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.CompareOptions">
      <summary>获取用于列或参数的比较规则。</summary>
      <returns>作为 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 用于列或参数的比较规则。</returns>
    </member>
    <member name="M:Microsoft.SqlServer.Server.SqlMetaData.InferFromValue(System.Object,System.String)">
      <summary>从指定的对象推导出元数据，并将它作为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例返回。</summary>
      <returns>作为 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例的推导出的元数据。</returns>
      <param name="value">用于从中推导出元数据的对象。</param>
      <param name="name">分配给返回的 <see cref="T:Microsoft.SqlServer.Server.SqlMetaData" /> 实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">v<paramref name="alue" /> 为 null。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.IsUniqueKey">
      <summary>指示表值参数中的列是否唯一。</summary>
      <returns>一个 Boolean 值。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.LocaleId">
      <summary>获取列或参数的区域设置 ID。</summary>
      <returns>作为 <see cref="T:System.Int64" /> 的列或参数的区域设置 ID。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Max">
      <summary>获取 text、ntext 和 image 数据类型的长度。</summary>
      <returns>text、ntext 和 image 数据类型的长度。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.MaxLength">
      <summary>获取列或参数的最大长度。</summary>
      <returns>作为 <see cref="T:System.Int64" /> 的列或参数的最大长度。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Name">
      <summary>获取列或参数的名称。</summary>
      <returns>作为 <see cref="T:System.String" /> 的列或参数的名称。</returns>
      <exception cref="T:System.InvalidOperationException">构造函数中指定的 <paramref name="Name" /> 的长度超过 128 个字符。</exception>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Precision">
      <summary>获取列或参数的精度。</summary>
      <returns>作为 <see cref="T:System.Byte" /> 的列或参数的精度。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.Scale">
      <summary>获取列或参数的小数位数。</summary>
      <returns>列或参数的小数位数。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SortOrder">
      <summary>返回列的排序顺序。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SortOrder" /> 对象。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SortOrdinal">
      <summary>返回列排序的序号。</summary>
      <returns>列排序的序号。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.SqlDbType">
      <summary>获取列或参数的数据类型。</summary>
      <returns>作为 <see cref="T:System.Data.DbType" /> 的列或参数的数据类型。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.TypeName">
      <summary>获取该实例所表示的用户定义的类型 (UDT) 或 SQL Server 类型的名称，名称由三部分组成。</summary>
      <returns>作为 <see cref="T:System.String" /> 的 UDT 或 SQL Server 类型的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.UseServerDefault">
      <summary>报告此列是否应使用默认服务器值。</summary>
      <returns>一个 Boolean 值。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionDatabase">
      <summary>获取此 XML 实例的架构集合所在的数据库的名称。</summary>
      <returns>此 XML 实例的架构集合所在的数据库的 <see cref="T:System.String" /> 形式的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionName">
      <summary>获取用于此 XML 实例的架构集合的名称。</summary>
      <returns>此 XML 实例的架构集合的 <see cref="T:System.String" /> 形式的名称。</returns>
    </member>
    <member name="P:Microsoft.SqlServer.Server.SqlMetaData.XmlSchemaCollectionOwningSchema">
      <summary>获取此 XML 实例的架构集合所在的所属关系架构。</summary>
      <returns>
        <see cref="T:System.String" /> 形式的此 XML 实例的架构集合所在的所属关系架构。</returns>
    </member>
    <member name="T:System.Data.SqlDbType">
      <summary>指定要用于 <see cref="T:System.Data.SqlClient.SqlParameter" /> 中的字段和属性的 SQL Server 特定的数据类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlDbType.BigInt">
      <summary>
        <see cref="T:System.Int64" />.64 位的有符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Binary">
      <summary>
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。二进制数据的固定长度流，范围在 1 到 8,000 个字节之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Bit">
      <summary>
        <see cref="T:System.Boolean" />.无符号数值，可以是 0、1 或 null。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Char">
      <summary>
        <see cref="T:System.String" />.非 Unicode 字符的固定长度流，范围在 1 到 8,000 个字符之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Date">
      <summary>日期数据，值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime">
      <summary>
        <see cref="T:System.DateTime" />.日期和时间数据，值范围从 1753 年 1 月 1 日到 9999 年 12 月 31 日，精度为 3.33 毫秒。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime2">
      <summary>日期和时间数据。日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTimeOffset">
      <summary>显示时区的日期和时间数据。日期值范围从公元 1 年 1 月 1 日到公元 9999 年 12 月 31 日。时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。时区值范围从 -14:00 到 +14:00。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Decimal">
      <summary>
        <see cref="T:System.Decimal" />.固定精度和小数位数数值，在 -10 38 -1 和 10 38 -1 之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Float">
      <summary>
        <see cref="T:System.Double" />.-1.79E +308 到 1.79E +308 范围内的浮点数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Image">
      <summary>
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。二进制数据的可变长度流，范围在 0 到 2 31 -1（即 2,147,483,647）字节之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Int">
      <summary>
        <see cref="T:System.Int32" />.32 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Money">
      <summary>
        <see cref="T:System.Decimal" />.货币值，范围在 -2 63（即 -922,337,203,685,477.5808）到 2 63 -1（即 +922,337,203,685,477.5807）之间，精度为千分之十个货币单位。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NChar">
      <summary>
        <see cref="T:System.String" />.Unicode 字符的固定长度流，范围在 1 到 4,000 个字符之间。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NText">
      <summary>
        <see cref="T:System.String" />.Unicode 数据的可变长度流，最大长度为 2 30 - 1（即 1,073,741,823）个字符。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NVarChar">
      <summary>
        <see cref="T:System.String" />.Unicode 字符的可变长度流，范围在 1 到 4,000 个字符之间。如果字符串大于 4,000 个字符，隐式转换会失败。在使用比 4,000 个字符更长的字符串时，请显式设置对象。当数据库列为 nvarchar(max) 时，使用 <see cref="F:System.Data.SqlDbType.NVarChar" /> 。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Real">
      <summary>
        <see cref="T:System.Single" />.-3.40E +38 到 3.40E +38 范围内的浮点数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallDateTime">
      <summary>
        <see cref="T:System.DateTime" />.日期和时间数据，值范围从 1900 年 1 月 1 日到 2079 年 6 月 6 日，精度为 1 分钟。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallInt">
      <summary>
        <see cref="T:System.Int16" />.16 位带符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallMoney">
      <summary>
        <see cref="T:System.Decimal" />.货币值，范围在 -214,748.3648 到 +214,748.3647 之间，精度为千分之十个货币单位。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Structured">
      <summary>指定表值参数中包含的构造数据的特殊数据类型。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Text">
      <summary>
        <see cref="T:System.String" />.非 Unicode 数据的可变长度流，最大长度为 2 31 -1（即 2,147,483,647）个字符。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Time">
      <summary>基于 24 小时制的时间数据。时间值范围从 00:00:00 到 23:59:59.9999999，精度为 100 毫微秒。对应于 SQL Server time 值。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Timestamp">
      <summary>
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。自动生成的二进制数字，它们保证在数据库中是唯一的。timestamp 通常用作为表行添加版本戳的机制。存储大小为 8 字节。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.TinyInt">
      <summary>
        <see cref="T:System.Byte" />.8 位无符号整数。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Udt">
      <summary>SQL Server 用户定义类型 (UDT)。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.UniqueIdentifier">
      <summary>
        <see cref="T:System.Guid" />.全局唯一标识符（或 GUID）。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarBinary">
      <summary>
        <see cref="T:System.Byte" /> 类型的 <see cref="T:System.Array" />。二进制数据的可变长度流，范围在 1 到 8,000 个字节之间。如果字节数组大于 8,000 个字节，隐式转换会失败。在使用比 8,000 个字节大的字节数组时，请显式设置对象。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarChar">
      <summary>
        <see cref="T:System.String" />.非 Unicode 字符的可变长度流，范围在 1 到 8,000 个字符之间。当数据库列为 varchar(max) 时，使用 <see cref="F:System.Data.SqlDbType.VarChar" /> 。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Variant">
      <summary>
        <see cref="T:System.Object" />.特殊数据类型，可以包含数值、字符串、二进制或日期数据，以及 SQL Server 值 Empty 和 Null，后两个值在未声明其他类型的情况下采用。</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Xml">
      <summary>XML 值。使用 <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" /> 方法或 <see cref="P:System.Data.SqlTypes.SqlXml.Value" /> 属性获取字符串形式的 XML，或通过调用 <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" /> 方法获取 <see cref="T:System.Xml.XmlReader" /> 形式的 XML。</summary>
    </member>
    <member name="T:System.Data.StatementCompletedEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件提供附加信息。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)">
      <summary>创建 <see cref="T:System.Data.StatementCompletedEventArgs" /> 类的新实例。</summary>
      <param name="recordCount">指示受导致 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件发生的语句影响的行数。</param>
    </member>
    <member name="P:System.Data.StatementCompletedEventArgs.RecordCount">
      <summary>指示受导致 <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件发生的语句影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.StatementCompletedEventHandler">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 事件的事件处理程序的委托类型。</summary>
      <param name="sender">事件源。</param>
      <param name="e">事件的数据。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.ApplicationIntent">
      <summary>指定 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent" /> 的值。可能的值为 ReadWrite 和 ReadOnly。</summary>
    </member>
    <member name="F:System.Data.SqlClient.ApplicationIntent.ReadOnly">
      <summary>连接到服务器时的应用程序工作负荷类型是只读的。</summary>
    </member>
    <member name="F:System.Data.SqlClient.ApplicationIntent.ReadWrite">
      <summary>连接到服务器时的应用程序工作负荷类型是可读写的。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SortOrder">
      <summary>指定数据行排序方式。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Ascending">
      <summary>按升序排序各行。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Descending">
      <summary>按降序排序各行。</summary>
    </member>
    <member name="F:System.Data.SqlClient.SortOrder.Unspecified">
      <summary>默认值。不指定排序顺序。</summary>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientFactory">
      <summary>表示一组方法，这些方法用于创建 <see cref="N:System.Data.SqlClient" /> 提供程序对数据源类的实现的实例。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateCommand">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbCommand" /> 实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 的新强类型实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateConnection">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbConnection" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbConnection" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateConnectionStringBuilder">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</summary>
      <returns>新的强类型 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 实例。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientFactory.CreateParameter">
      <summary>返回强类型的 <see cref="T:System.Data.Common.DbParameter" /> 实例。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 的新强类型实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.SqlClient.SqlClientFactory.Instance">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlClientFactory" /> 的实例。此操作可用于检索强类型数据对象。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlCommand">
      <summary>表示要对 SQL Server 数据库执行的一个 Transact-SQL 语句或存储过程。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String)">
      <summary>使用查询的文本初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)">
      <summary>使用查询的文本和一个 <see cref="T:System.Data.SqlClient.SqlConnection" /> 初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">一个表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
      <summary>使用查询文本、<see cref="T:System.Data.SqlClient.SqlConnection" /> 以及 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 初始化 <see cref="T:System.Data.SqlClient.SqlCommand" /> 类的新实例。</summary>
      <param name="cmdText">查询的文本。</param>
      <param name="connection">一个表示到 SQL Server 实例的连接的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
      <param name="transaction">其中执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="T:System.Data.SqlClient.SqlTransaction" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.Cancel">
      <summary>尝试取消 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的执行。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandText">
      <summary>获取或设置要在数据源中执行的 Transact-SQL 语句、表名或存储过程。</summary>
      <returns>要执行的 Transact-SQL 语句或存储过程。默认值为一个空字符串。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandTimeout">
      <summary>获取或设置在终止尝试执行命令并生成错误之前的等待时间。</summary>
      <returns>等待命令执行所需的时间（以秒为单位）。默认值为 30 秒。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.CommandType">
      <summary>获取或设置一个值，该值指示解释 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 属性的方式。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 值之一。默认值为 Text。</returns>
      <exception cref="T:System.ArgumentException">The value was not a valid <see cref="T:System.Data.CommandType" />. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Connection">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的此实例使用的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</summary>
      <returns>到数据源的连接。默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> property was changed while the command was enlisted in a transaction.. </exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.CreateParameter">
      <summary>创建 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的新实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.DesignTimeVisible">
      <summary>获取或设置一个值，该值指示命令对象是否应在 Windows 窗体设计器控件中可见。</summary>
      <returns>一个指示命令对象是否应在控件中可见的值。默认值为 true。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery">
      <summary>对连接执行 Transact-SQL 语句并返回受影响的行数。</summary>
      <returns>受影响的行数。</returns>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row.This exception is not generated when you are using Microsoft .NET Framework version 1.0.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> 的异步版本，对连接执行 Transact-SQL 语句并返回受影响的行数。取消标记可用于请求在命令超时超过前放弃操作。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指令。</param>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" /> more than once for the same instance before task completion.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.Context Connection=true is specified in the connection string.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned an error while executing the command text.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReader">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row.This exception is not generated when you are using Microsoft .NET Framework version 1.0.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.InvalidOperationException">The current state of the connection is closed.<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> requires an open <see cref="T:System.Data.SqlClient.SqlConnection" />.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并使用 <see cref="T:System.Data.CommandBehavior" /> 值之一生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 值之一。</param>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.ArgumentException">An invalid <see cref="T:System.Data.CommandBehavior" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" /> more than once for the same instance before task completion.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.Context Connection=true is specified in the connection string.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned an error while executing the command text.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" /> 的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="behavior">语句执行和数据检索的选项。当设置为 Default 时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 将读取整个行（返回完整“任务”前）。</param>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.ArgumentException">An invalid <see cref="T:System.Data.CommandBehavior" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" /> more than once for the same instance before task completion.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.Context Connection=true is specified in the connection string.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned an error while executing the command text.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" /> 的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />取消标记可用于请求在命令超时超过前放弃操作。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="behavior">语句执行和数据检索的选项。当设置为 Default 时，<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> 将读取整个行（返回完整“任务”前）。</param>
      <param name="cancellationToken">取消指令。</param>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.ArgumentException">An invalid <see cref="T:System.Data.CommandBehavior" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> more than once for the same instance before task completion.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.Context Connection=true is specified in the connection string.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned an error while executing the command text.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> 的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 并生成一个 <see cref="T:System.Data.SqlClient.SqlDataReader" />。取消标记可用于请求在命令超时超过前放弃操作。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指令。</param>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.ArgumentException">An invalid <see cref="T:System.Data.CommandBehavior" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> more than once for the same instance before task completion.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.Context Connection=true is specified in the connection string.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned an error while executing the command text.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteScalar">
      <summary>执行查询，并返回由查询返回的结果集中的第一行的第一列。其他列或行将被忽略。</summary>
      <returns>为结果集中的第一行的第一列，如果结果集为空，则为 null 引用（Visual Basic 中 Nothing）。返回的最大字符数为 2033 个字符。</returns>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row.This exception is not generated when you are using Microsoft .NET Framework version 1.0.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" /> 的异步版本，异步执行查询，并将查询返回的结果集中的第一行的第一列返回。其他列或行将被忽略。取消标记可用于请求在命令超时超过前放弃操作。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指令。</param>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> more than once for the same instance before task completion.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.Context Connection=true is specified in the connection string.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned an error while executing the command text.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader">
      <summary>将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> 并生成一个 <see cref="T:System.Xml.XmlReader" /> 对象。</summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 对象。</returns>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row.This exception is not generated when you are using Microsoft .NET Framework version 1.0.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Xml.XmlReader" /> 对象。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> more than once for the same instance before task completion.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.Context Connection=true is specified in the connection string.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned an error while executing the command text.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> 的异步版本，将 <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> 发送到 <see cref="P:System.Data.SqlClient.SqlCommand.Connection" />，并生成一个 <see cref="T:System.Xml.XmlReader" /> 对象。取消标记可用于请求在命令超时超过前放弃操作。将通过返回的任务对象报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指令。</param>
      <exception cref="T:System.InvalidCastException">A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Binary or VarBinary was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.Stream" />.For more information about streaming, see SqlClient 流支持.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Char, NChar, NVarChar, VarChar, or  Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.IO.TextReader" />.A <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> other than Xml was used when <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> was set to <see cref="T:System.Xml.XmlReader" />.</exception>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> more than once for the same instance before task completion.The <see cref="T:System.Data.SqlClient.SqlConnection" /> closed or dropped during a streaming operation.For more information about streaming, see SqlClient 流支持.Context Connection=true is specified in the connection string.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned an error while executing the command text.A timeout occurred during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.IO.IOException">An error occurred in a <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.IO.TextReader" /> object was closed during a streaming operation.For more information about streaming, see SqlClient 流支持.</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Parameters">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <returns>Transact-SQL 语句或存储过程的参数。默认值为空集合。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlCommand.Prepare">
      <summary>在 SQL Server 的实例上创建命令的一个准备版本。</summary>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="E:System.Data.SqlClient.SqlCommand.StatementCompleted">
      <summary>当 Transact-SQL 语句执行完成时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.Transaction">
      <summary>获取或设置其中会执行 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的 <see cref="T:System.Data.SqlClient.SqlTransaction" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlTransaction" />。默认值为 null。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlCommand.UpdatedRowSource">
      <summary>获取或设置命令结果在由 <see cref="T:System.Data.Common.DbDataAdapter" /> 的 Update 方法使用时应用于 <see cref="T:System.Data.DataRow" /> 的方式。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 值之一。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlConnection">
      <summary>表示到 SQL Server 数据库的打开连接。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)">
      <summary>如果给定一个包含连接字符串的字符串，则初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类的新实例。</summary>
      <param name="connectionString">用于打开 SQL Server 数据库的连接。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction">
      <summary>开始数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</exception>
      <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>以指定的隔离级别启动数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="iso">事务应在其下运行的隔离级别。</param>
      <exception cref="T:System.Data.SqlClient.SqlException">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</exception>
      <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)">
      <summary>以指定的隔离级别和事务名称启动数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="iso">事务应在其下运行的隔离级别。</param>
      <param name="transactionName">事务名称。</param>
      <exception cref="T:System.Data.SqlClient.SqlException">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</exception>
      <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)">
      <summary>以指定的事务名称启动数据库事务。</summary>
      <returns>表示新事务的对象。</returns>
      <param name="transactionName">事务名称。</param>
      <exception cref="T:System.Data.SqlClient.SqlException">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</exception>
      <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)">
      <summary>为打开的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 更改当前数据库。</summary>
      <param name="database">要代替当前数据库加以使用的数据库的名称。</param>
      <exception cref="T:System.ArgumentException">The database name is not valid.</exception>
      <exception cref="T:System.InvalidOperationException">The connection is not open. </exception>
      <exception cref="T:System.Data.SqlClient.SqlException">Cannot change the database. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ClearAllPools">
      <summary>清空连接池。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)">
      <summary>清空与指定连接关联的连接池。</summary>
      <param name="connection">要从池中清除的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ClientConnectionId">
      <summary>最近连接尝试连接的 ID，无论该尝试是成功还是失败。</summary>
      <returns>最近连接尝试的连接 ID。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.Close">
      <summary>关闭与数据库之间的连接。此方法是关闭任何打开连接的首选方法。</summary>
      <exception cref="T:System.Data.SqlClient.SqlException">The connection-level error that occurred while opening the connection. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ConnectionString">
      <summary>获取或设置用于打开一个 SQL Server 数据库的字符串。</summary>
      <returns>连接字符串，其中包含源数据库名称和建立初始连接所需的其他参数。默认值为一个空字符串。</returns>
      <exception cref="T:System.ArgumentException">An invalid connection string argument has been supplied, or a required connection string argument has not been supplied. </exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ConnectionTimeout">
      <summary>获取终止尝试并生成错误之前在尝试建立连接时所等待的时间。</summary>
      <returns>等待连接打开所需的时间（以秒为单位）。默认值为 15 秒。</returns>
      <exception cref="T:System.ArgumentException">The value set is less than 0. </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.CreateCommand">
      <summary>创建并返回一个与 <see cref="T:System.Data.SqlClient.SqlConnection" /> 关联的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.Database">
      <summary>获取当前数据库的名称或打开连接后要使用的数据库的名称。</summary>
      <returns>当前数据库的名称或打开连接后要使用的数据库的名称。默认值为一个空字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.DataSource">
      <summary>获取要连接的 SQL Server 的实例的名称。</summary>
      <returns>要连接的 SQL Server 的实例的名称。默认值为一个空字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors">
      <summary>获取或设置 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> 属性。</summary>
      <returns>如果已设置了 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> 属性，则为 true；否则为 false。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Data.SqlClient.SqlConnection.InfoMessage">
      <summary>当 SQL Server 返回一个警告或信息性消息时发生。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.Open">
      <summary>使用 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> 指定的属性设置打开一个数据库连接。</summary>
      <exception cref="T:System.InvalidOperationException">Cannot open a connection without specifying a data source or server.orThe connection is already open.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">A connection-level error occurred while opening the connection.If the <see cref="P:System.Data.SqlClient.SqlException.Number" /> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset.See the <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> method for more information.The &lt;system.data.localdb&gt; tag in the app.config file has invalid or unknown elements.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">There are two entries with the same name in the &lt;localdbinstances&gt; section.</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlConnection.Open" /> 的异步版本，打开 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> 指定的属性设置的数据库连接。取消标记可用于请求在连接超时超过前放弃操作。异常将通过返回的任务传播。如果在未成功连接的情况下连接超时时间已过，则返回的任务将被标记为“附带异常出错”。实现返回一个不带有用于共用和非共用连接的锁定调用线程的“任务”。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指令。</param>
      <exception cref="T:System.InvalidOperationException">Calling <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> more than once for the same instance before task completion.Context Connection=true is specified in the connection string.A connection was not available from the connection pool before the connection time out elapsed.</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">Any error returned by SQL Server that occurred while opening the connection.</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.PacketSize">
      <summary>获取用于与 SQL Server 的实例进行通信的网络数据包的大小（以字节为单位）。</summary>
      <returns>网络数据包的大小（以字节为单位）。默认值为 8000。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.ResetStatistics">
      <summary>如果启用了统计信息收集，所有值都将重置为零。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnection.RetrieveStatistics">
      <summary>调用此方法时，将返回统计信息的名称值对集合。</summary>
      <returns>返回 <see cref="T:System.Collections.DictionaryEntry" /> 项的 <see cref="T:System.Collections.IDictionary" /> 类型的引用。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.ServerVersion">
      <summary>获取一个字符串，其中包含客户端所连接到的 SQL Server 的实例的版本。</summary>
      <returns>SQL Server 的实例的版本。</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" /> was called while the returned Task was not completed and the connection was not opened after a call to <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />.</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.State">
      <summary>在最近在连接上执行网络操作的期间，指示 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的状态。</summary>
      <returns>一个 <see cref="T:System.Data.ConnectionState" /> 枚举。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.StatisticsEnabled">
      <summary>如果设置为 true，则对当前连接启用统计信息收集。</summary>
      <returns>如果启用了统计信息收集，则返回 true；否则返回 false。默认值为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnection.WorkstationId">
      <summary>获取一个标识数据库客户端的字符串。</summary>
      <returns>一个标识数据库客户端的字符串。如果未指定，则为客户端计算机的名称。如果两个都没有指定，则值为空字符串。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.SqlClient.SqlConnectionStringBuilder">
      <summary>为创建和管理由 <see cref="T:System.Data.SqlClient.SqlConnection" /> 类使用的连接字符串的内容提供了一种简单方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 类的新实例。所提供的连接字符串为实例的内部连接信息提供数据。</summary>
      <param name="connectionString">对象内部连接信息的基础。分析为名称/值对。无效的键名会引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />。</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">连接字符串中的键名无效。</exception>
      <exception cref="T:System.FormatException">连接字符串中的值无效（特别是需要布尔值或数值型值而并未提供时）。</exception>
      <exception cref="T:System.ArgumentException">提供的 <paramref name="connectionString" /> 无效。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent">
      <summary>连接到 SQL Server 可用性组中的数据库时声明应用程序工作负荷类型。您可以使用 <see cref="T:System.Data.SqlClient.ApplicationIntent" /> 设置此属性的值。有关 AlwaysOn 可用性组的 SqlClient 支持的更多信息，请参见SqlClient 对高可用性的支持，灾难恢复。</summary>
      <returns>返回属性（值类型为 <see cref="T:System.Data.SqlClient.ApplicationIntent" />）的当前值。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName">
      <summary>获取或设置与连接字符串关联的应用程序的名称。</summary>
      <returns>应用程序的名称；或者，如果未提供名称，则为“.NET SqlClient Data Provider”。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename">
      <summary>获取或设置包含主数据文件名称的字符串。该字符串包括可附加数据库的完整路径名。</summary>
      <returns>AttachDBFilename 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.Clear">
      <summary>清除 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例的内容。</summary>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]在确定有一个空闲的连接失败之后尝试重新连接的次数。该值必须是介于 0 到 255 之间的整数。默认值为 1。设置为 0 可禁用重新连接空闲的连接失败。如果设置的值超过允许的范围，则将引发 <see cref="T:System.ArgumentException" />。</summary>
      <returns>在确定有一个空闲的连接失败之后尝试重新连接的次数。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval">
      <summary>[在 .NET Framework 4.5.1 和更高版本中受支持]在确定有一个空闲的连接失败之后，每个重新连接尝试之间的时间（以秒为单位）。该值必须是介于 1 到 60 之间的整数。默认值为 10 秒。如果设置的值超过允许的范围，则将引发 <see cref="T:System.ArgumentException" />。</summary>
      <returns>在确定有一个空闲的连接失败之后，每个重新连接尝试之间的时间（以秒为单位）。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout">
      <summary>获取或设置在终止尝试并产生错误之前，等待与服务器连接的时间长度（以秒为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout" /> 属性的值；如果未提供任何值，则为 15 秒。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)">
      <summary>确定 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 是否包含特定键。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage">
      <summary>获取或设置 SQL Server 语言记录名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource">
      <summary>获取或设置要连接到的 SQL Server 实例的名称或网络地址。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt">
      <summary>获取或设置一个布尔值，该值指示在服务器安装了证书的情况下，SQL Server 是否为客户端和服务器之间发送的所有数据使用 SSL 加密。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner">
      <summary>获取或设置在主服务器停机时要连接到的伙伴服务器的名称或地址。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog">
      <summary>获取或设置与该连接关联的数据库的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity">
      <summary>获取或设置一个布尔值，该值指示是否在连接中指定用户 ID 和密码（值为 false 时），或者是否使用当前的 Windows 帐户凭据进行身份验证（值为 true 时）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)">
      <summary>获取或设置与指定的键相关联的值。在 C# 中，此属性为索引器。</summary>
      <returns>与指定的键相关联的值。</returns>
      <param name="keyword">要获取或设置的项的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">尝试添加可用键中不存在的键。</exception>
      <exception cref="T:System.FormatException">连接字符串中的值无效（特别是需要布尔值或数值型值而并未提供时）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Keys">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的键。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout">
      <summary>获取或设置连接被销毁前在连接池中存活的最短时间（以秒为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout" /> 属性的值；如果未提供任何值，则为 0。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize">
      <summary>获取或设置针对此特定连接字符串连接池中所允许的最大连接数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize" /> 属性的值；如果未提供任何值，则为 100。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize">
      <summary>获取或设置针对此特定连接字符串连接池中所允许的最小连接数。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize" /> 属性的值；如果未提供任何值，则为 0。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets">
      <summary>如果为 true，则应用程序可以保留多活动结果集 (MARS)。如果为 false，则应用程序必须处理或取消一个批处理中的所有结果集，然后才能对该连接执行任何其他批处理。有关更多信息，请参见多活动结果集 (MARS)。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover">
      <summary>如果您的应用程序要连接到不同子网上的 AlwaysOn 可用性组 (AG)，则设置 MultiSubnetFailover=true 会加快检测（当前）活动服务器以及与服务器的连接。有关 AlwaysOn 可用性组的 SqlClient 支持的更多信息，请参见SqlClient 对高可用性的支持，灾难恢复。</summary>
      <returns>返回表示当前属性值的 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize">
      <summary>获取或设置用来与 SQL Server 的实例通信的网络数据包的大小（以字节为单位）。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize" /> 属性的值；如果未提供任何值，则为 8000。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Password">
      <summary>获取或设置 SQL Server 帐户的密码。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Password" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">密码不正确设置为无效。请参见下面的代码示例。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo">
      <summary>获取或设置一个布尔值，该值指示如果连接是打开的或者一直处于打开状态，那么安全敏感信息（如密码）是否将不作为连接的一部分返回。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling">
      <summary>获取或设置一个布尔值，该值指示每次请求连接时该连接是汇入连接池还是显式打开。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling" /> 属性的值；如果未提供任何值，则为 true。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)">
      <summary>移除 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例中具有指定键的项。</summary>
      <returns>如果该键存在于连接字符串中并被移除，则为 true；如果该键不存在，则为 false。</returns>
      <param name="keyword">要从此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的连接字符串移除的键/值对中的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null（在 Visual Basic 中为 Nothing）</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication">
      <summary>获取或设置一个布尔值，该值指示是否使用连接来支持复制。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication" /> 属性的值；如果未提供任何值，则为 false。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>指示此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 实例中是否存在指定的键。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 包含带有指定键的项，则为 true；否则为 false。</returns>
      <param name="keyword">要在 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中定位的键。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate">
      <summary>获取或设置一个值，该值指示在跳过用于验证信任的证书链遍历时是否加密信道。</summary>
      <returns>Boolean。可识别的值为 true、false、yes 和 no。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>从此 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中检索与所提供的键对应的值。</summary>
      <returns>如果在连接字符串中找到 <paramref name="keyword" />，则为 true；否则为 false。</returns>
      <param name="keyword">要检索的项的键。</param>
      <param name="value">与 <paramref name="keyword." /> 对应的值</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 包含一个 null 值（在 Visual Basic 中为 Nothing）。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion">
      <summary>获取或设置一个字符串值，该值指示应用程序所需的类型系统。</summary>
      <returns>下表列出了 <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion" /> 属性的可能值：值说明SQL Server 2005使用 SQL Server 2005 类型系统。对 ADO.NET 的当前版本不进行任何转换。SQL Server 2008使用 SQL Server 2008 类型系统。最新使用此客户端/服务器对能够处理的最新版本。这个最新版本将随着客户端和服务器组件的升级自动更新。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID">
      <summary>获取或设置连接到 SQL Server 时要使用的用户 ID。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance">
      <summary>获取或设置一个值，该值指示是否将连接从默认的 SQL Server Express 实例重定向到在调用方帐户之下运行并且在运行时启动的实例。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance" /> 属性的值；如果未提供任何值，则为 False。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.Values">
      <summary>获取包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder" /> 中的值。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID">
      <summary>获取或设置连接到 SQL Server 的工作站的名称。</summary>
      <returns>
        <see cref="P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID" /> 属性的值；如果未提供任何值，则为 String.Empty。</returns>
      <exception cref="T:System.ArgumentNullException">若要将值设置为 null，请使用 <see cref="F:System.DBNull.Value" />。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.SqlClient.SqlDataReader">
      <summary>提供一种从 SQL Server 数据库读取行的只进流的方式。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Connection">
      <summary>获取与 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 关联的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</summary>
      <returns>与 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 关联的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Depth">
      <summary>获取一个值，用于指示当前行的嵌套深度。</summary>
      <returns>当前行的嵌套深度。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.FieldCount">
      <summary>获取当前行中的列数。</summary>
      <returns>如果未放在有效的记录集中，则为 0；否则为当前行中的列数。默认值为 -1。</returns>
      <exception cref="T:System.NotSupportedException">没有对 SQL Server 实例的当前连接。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)">
      <summary>获取指定列的布尔值形式的值。</summary>
      <returns>列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)">
      <summary>获取指定列的字节形式的值。</summary>
      <returns>指定列的字节形式的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字节流读入缓冲区，并将其作为从给定的缓冲区偏移量开始的数组。</summary>
      <returns>读取的实际字节数。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">字段中的索引，从其开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">
        <paramref name="buffer" /> 中写入操作开始位置的索引。</param>
      <param name="length">要复制到缓冲区中的最大长度。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)">
      <summary>获取指定列的单个字符串形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>从指定的列偏移量将字符流作为数组从给定的缓冲区偏移量开始读入缓冲区。</summary>
      <returns>读取的实际字符数。</returns>
      <param name="i">从零开始的列序号。</param>
      <param name="dataIndex">字段中的索引，从其开始读取操作。</param>
      <param name="buffer">要将字节流读入的缓冲区。</param>
      <param name="bufferIndex">
        <paramref name="buffer" /> 中写入操作开始位置的索引。</param>
      <param name="length">要复制到缓冲区中的最大长度。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)">
      <summary>获取一个表示指定列的数据类型的字符串。</summary>
      <returns>表示指定列的数据类型的字符串。</returns>
      <param name="i">要查找的列的从零开始的序号位置。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.DateTime" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)">
      <summary>检索指定列的 <see cref="T:System.DateTimeOffset" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Decimal" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)">
      <summary>获取指定列的双精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>用于 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)">
      <summary>获取是对象的数据类型的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Type" />，它是对象的数据类型。在用户定义的类型 (UDT) 从数据库中返回的情况下，如果客户端上不存在该类型，则 GetFieldType 返回 null。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)">
      <summary>同步获取作为类型的指定列的值。<see cref="M:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)" /> 是此方法的异步版本。</summary>
      <returns>返回的类型对象。</returns>
      <param name="i">要检索的列。</param>
      <typeparam name="T">要返回的值的类型。有关更多信息，请参见备注部分。</typeparam>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。按顺序模式尝试读取上一步骤中读取的列。没有正在进行的异步操作。以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该列中的值 null (<see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" /> == true)，检索非 SQL 类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与 SQL Server 返回的类型不匹配或无法进行转换。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>异步获取作为类型的指定列的值。<see cref="M:System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)" />是此方法的同步版本。</summary>
      <returns>返回的类型对象。</returns>
      <param name="i">要检索的列。</param>
      <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播。此构造函数不对取消做保证。设置 CancellationToken.None 使得这种方法等同于 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />。返回任务必须标记为已取消。</param>
      <typeparam name="T">要返回的值的类型。有关更多信息，请参见备注部分。</typeparam>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。按顺序模式尝试读取上一步骤中读取的列。没有正在进行的异步操作。以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该列中的值 null (<see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" /> == true)，检索非 SQL 类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="T" /> 与 SQL Server 返回的类型不匹配或无法进行转换。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)">
      <summary>获取指定列的单精度浮点数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)">
      <summary>获取指定列的值作为全局唯一标识符 (GUID)。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)">
      <summary>获取指定列的 16 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)">
      <summary>获取指定列的 32 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)">
      <summary>获取指定列的 64 位有符号整数形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetName(System.Int32)">
      <summary>获取指定列的名称。</summary>
      <returns>指定列的名称。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)">
      <summary>在给定列名称的情况下获取列序号。</summary>
      <returns>从零开始的列序号。</returns>
      <param name="name">列的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的名称不是有效的列名称。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>获取一个 Object，它表示基础提供程序特定的字段类型。</summary>
      <returns>获取一个 <see cref="T:System.Object" />，它表示基础提供程序特定的字段类型。</returns>
      <param name="i">表示列序号的 <see cref="T:System.Int32" />。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>获取一个表示基础提供程序特定值的 Object。</summary>
      <returns>一个 <see cref="T:System.Object" />，它表示基础提供程序特定值。</returns>
      <param name="i">表示列序号的 <see cref="T:System.Int32" />。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>获取表示基础提供程序特定值的对象的数组。</summary>
      <returns>对象数组，它表示基础提供程序特定的值。</returns>
      <param name="values">要将列值复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 形式的值。</summary>
      <returns>列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)">
      <summary>获取指定列的 <see cref="T:System.Data.SqlTypes.SqlString" /> 形式的值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlTypes.SqlString" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)">
      <summary>返回指定列中 SQL Server 类型的数据值。</summary>
      <returns>表示为 <see cref="T:System.Data.SqlDbType" /> 的列值。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])">
      <summary>填充包含记录中所有列的值的 <see cref="T:System.Object" /> 数组，这些值表示为 SQL Server 类型。</summary>
      <returns>表示复制的列数的整数。</returns>
      <param name="values">要将值复制到其中的 <see cref="T:System.Object" /> 数组。这些列值表示为 SQL Server 类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 null。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)">
      <summary>获取指定列的 XML 值形式的值。</summary>
      <returns>包含相应字段中存储的 XML 的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的索引在 0 至 <see cref="P:System.Data.DataTableReader.FieldCount" /> -1 的范围之外。</exception>
      <exception cref="T:System.InvalidOperationException">已尝试读取或访问关闭的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 中的列。</exception>
      <exception cref="T:System.InvalidCastException">检索的数据与 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型不兼容。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)">
      <summary>检索作为 <see cref="T:System.IO.Stream" /> 的二进制、图像、varbinary、UDT 和变量数据类型。</summary>
      <returns>流对象。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。按顺序模式尝试读取上一步骤中读取的列。没有正在进行的异步操作。以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不属于以下类型之一：binaryimagevarbinaryUDT</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetString(System.Int32)">
      <summary>获取指定列的字符串形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)">
      <summary>检索作为 <see cref="T:System.IO.TextReader" /> 的 Char、 NChar、 NText、 NVarChar、 text、 varChar 和 Variant data types。</summary>
      <returns>返回的对象。</returns>
      <param name="i">要检索的列。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。按顺序模式尝试读取上一步骤中读取的列。没有正在进行的异步操作。以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">返回的类型不属于以下类型之一：charncharntextnvarchar文本varchar</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)">
      <summary>检索指定列的 <see cref="T:System.TimeSpan" /> 对象形式的值。</summary>
      <returns>指定列的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.InvalidCastException">指定的强制转换无效。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)">
      <summary>获取以本机格式表示的指定列的值。</summary>
      <returns>对于 null 数据库列，此方法返回 <see cref="T:System.DBNull" />。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])">
      <summary>使用当前行的列值来填充对象数组。</summary>
      <returns>数组中 <see cref="T:System.Object" /> 的实例的数目。</returns>
      <param name="values">要将特性列复制到其中的 <see cref="T:System.Object" /> 数组。</param>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)">
      <summary>检索作为 <see cref="T:System.Xml.XmlReader" /> 的类型 XML 数据。</summary>
      <returns>返回的对象。</returns>
      <param name="i">指定列的值。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。按顺序模式尝试读取上一步骤中读取的列。没有正在进行的异步操作。以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
      <exception cref="T:System.InvalidCastException">返回的类不是 xml。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.HasRows">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 是否包含一行或多行。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 包含一行或多行，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.IsClosed">
      <summary>检索一个布尔值，该值指示是否已关闭指定的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例。</summary>
      <returns>如果指定的 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 实例已关闭，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)">
      <summary>获取一个值，该值指示列中是否包含不存在的或缺少的值。</summary>
      <returns>如果指定的列值与 <see cref="T:System.DBNull" /> 等效，则为 true；否则为 false。</returns>
      <param name="i">从零开始的列序号。</param>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" /> 的异步版本，其获取一个值，这个值指示此列是否包含不存在或缺失的值。 取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>如果指定的列值与 DBNull 等效，则为 true；否则为 false。</returns>
      <param name="i">从零开始的要检索的列。</param>
      <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播。此构造函数不对取消做保证。设置 CancellationToken.None 使得这种方法等同于 <see cref="M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)" />。返回任务必须标记为已取消。</param>
      <exception cref="T:System.InvalidOperationException">连接中断或在数据检索期间已关闭。数据检索期间<see cref="T:System.Data.SqlClient.SqlDataReader" /> 处于关闭状态。没有可读取的就绪数据 (例如，第一个 <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 未被调用或返回错误)。按顺序模式尝试读取上一步骤中读取的列。没有正在进行的异步操作。以顺序模式运行时，这适用于所有 Get* 方法，读取流时也可对其进行调用。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.IndexOutOfRangeException">尝试读取不存在的列。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Item(System.Int32)">
      <summary>在给定列序号的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="i">从零开始的列序号。</param>
      <exception cref="T:System.IndexOutOfRangeException">传递的索引位于 0 至 <see cref="P:System.Data.IDataRecord.FieldCount" /> 的范围之外。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.Item(System.String)">
      <summary>在给定列名称的情况下，获取指定列的以本机格式表示的值。</summary>
      <returns>指定列的以本机格式表示的值。</returns>
      <param name="name">列名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">未找到具有指定名称的列。</exception>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.NextResult">
      <summary>当读取批处理 Transact-SQL 语句的结果时，使数据读取器前进到下一个结果。</summary>
      <returns>如果存在多个结果集，则为 true；否则为 false。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlDataReader.NextResult" /> 的异步版本，读取批处理 Transact-SQL 语句的结果时，将数据读取器推进到下一个结果。取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)" />。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.Read">
      <summary>使 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 前进到下一条记录。</summary>
      <returns>如果存在多个行，则为 true；否则为 false。</returns>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。</exception>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.SqlClient.SqlDataReader.Read" /> 的异步版本，将 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 前移到下一条记录。取消标记可用于在命令超时超过前请求放弃操作。通过返回的任务对象将报告异常。</summary>
      <returns>表示异步操作的任务。</returns>
      <param name="cancellationToken">取消指示。</param>
      <exception cref="T:System.InvalidOperationException">在任务完成之前，为相同的实例多次调用 <see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" />。在连接字符串中指定 Context Connection=true。</exception>
      <exception cref="T:System.Data.SqlClient.SqlException">行命令文本时，SQL Server 返回了错误。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.RecordsAffected">
      <summary>获取执行 Transact-SQL 语句所更改、插入或删除的行数。</summary>
      <returns>已更改、插入或删除的行数；如果没有任何行受到影响或语句失败，则为 0；-1 表示 SELECT 语句。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlDataReader.VisibleFieldCount">
      <summary>获取 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 中未隐藏的字段的数目。</summary>
      <returns>未隐藏的字段的数目。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="T:System.Data.SqlClient.SqlError">
      <summary>收集与 SQL Server 返回的警告或错误有关的信息。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Class">
      <summary>获取从 SQL Server 返回的错误的严重级别。</summary>
      <returns>一个 1 至 25 的值，它指示错误的严重级别。默认值为 0。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.LineNumber">
      <summary>从包含错误的 Transact-SQL 批命令或存储过程中获取行号。</summary>
      <returns>Transact-SQL 批命令或存储过程内包含错误的行号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Message">
      <summary>获取对错误进行描述的文本。</summary>
      <returns>对错误进行描述的文本。有关由 SQL Server 生成的错误的更多信息，请参见 SQL Server 联机丛书。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Number">
      <summary>获取一个标识错误类型的数字。</summary>
      <returns>标识错误类型的数字。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Procedure">
      <summary>获取生成错误的存储过程或远程过程调用 (RPC) 的名称。</summary>
      <returns>存储过程或 RPC 的名称。有关由 SQL Server 生成的错误的更多信息，请参见 SQL Server 联机丛书。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Server">
      <summary>获取生成错误的 SQL Server 实例的名称。</summary>
      <returns>SQL Server 实例的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.Source">
      <summary>获取生成错误的提供程序的名称。</summary>
      <returns>生成错误的提供程序的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlError.State">
      <summary>某些错误消息可能在数据库引擎的代码中多次引发。例如，几种不同的情况下可引发 1105 错误。引发错误的每种特定情况将分配一个唯一状态代码。</summary>
      <returns>状态代码。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlError.ToString">
      <summary>获取错误信息的完整文本。</summary>
      <returns>错误信息的完整文本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlErrorCollection">
      <summary>收集 SQL Server .NET Framework 数据提供程序生成的所有错误。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合的元素复制到 <see cref="T:System.Array" /> 中，从指定索引开始。</summary>
      <param name="array">向其中复制元素的 <see cref="T:System.Array" />。</param>
      <param name="index">从该处开始复制到 <paramref name="array" /> 参数中的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 与 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合中的元素数之和大于 <see cref="T:System.Array" /> 的 <see cref="P:System.Array.Length" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <paramref name="array" /> 无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.CopyTo(System.Data.SqlClient.SqlError[],System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合的元素复制到 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 中，从指定索引开始。</summary>
      <param name="array">向其中复制元素的 <see cref="T:System.Data.SqlClient.SqlErrorCollection" />。</param>
      <param name="index">从该处开始复制到 <paramref name="array" /> 参数中的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 与 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 集合中的元素数之和大于 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 对于 <paramref name="array" /> 无效。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.Count">
      <summary>获取集合中错误的数目。</summary>
      <returns>集合中错误的总数。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlErrorCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Data.SqlClient.SqlErrorCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.Item(System.Int32)">
      <summary>获取位于指定索引处的错误。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlError" />，包含指定索引位置的错误。</returns>
      <param name="index">要检索的错误的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">索引参数超出数组界限。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlErrorCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参见 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlException">
      <summary>当 SQL Server 返回警告或错误时引发的异常。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Class">
      <summary>获取从 SQL Server .NET Framework 数据提供程序返回的错误的严重级别。</summary>
      <returns>一个 1 至 25 的值，它指示错误的严重级别。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.ClientConnectionId">
      <summary>表示客户端连接 ID。有关详细信息，请参阅 ADO.NET 中的数据跟踪。</summary>
      <returns>返回客户端连接 ID。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Errors">
      <summary>获取由一个或多个 <see cref="T:System.Data.SqlClient.SqlError" /> 对象组成的集合，这些对象提供有关 SQL Server .NET Framework 数据提供程序所生成的异常的详细信息。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlError" /> 类的收集的实例。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.LineNumber">
      <summary>获取生成错误的 Transact-SQL 批命令或存储过程内的行号。</summary>
      <returns>生成错误的 Transact-SQL 批命令或存储过程内的行号。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Number">
      <summary>获取一个标识错误类型的数字。</summary>
      <returns>标识错误类型的数字。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Procedure">
      <summary>获取生成错误的存储过程或远程过程调用 (RPC) 的名称。</summary>
      <returns>存储过程或 RPC 的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Server">
      <summary>获取正在运行生成错误的 SQL Server 实例的计算机的名称。</summary>
      <returns>运行 SQL Server 实例的计算机的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.Source">
      <summary>获取生成错误的提供程序的名称。</summary>
      <returns>生成错误的提供程序的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlException.State">
      <summary>从 SQL Server 中获取一个数值错误代码，它表示错误、警告或“未找到数据”消息。有关如何将这些值解码的更多信息，请参见“SQL Server 联机丛书”。</summary>
      <returns>表示错误代码的数字。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlException.ToString">
      <summary>返回表示当前 <see cref="T:System.Data.SqlClient.SqlException" /> 对象的字符串，并包括客户端连接 ID（有关更多信息，请参见 <see cref="P:System.Data.SqlClient.SqlException.ClientConnectionId" />）。</summary>
      <returns>一个字符串，表示当前的 <see cref="T:System.Data.SqlClient.SqlException" /> object.<see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlInfoMessageEventArgs">
      <summary>为 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件提供数据。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Errors">
      <summary>获取从服务器发送来的警告的集合。</summary>
      <returns>从服务器发送来的警告的集合。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Message">
      <summary>获取从数据库发送的全文本错误。</summary>
      <returns>错误的完整文本。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlInfoMessageEventArgs.Source">
      <summary>获取生成错误的对象的名称。</summary>
      <returns>生成错误的对象的名称。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlInfoMessageEventArgs.ToString">
      <summary>检索 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件的字符串表示形式。</summary>
      <returns>表示 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件的字符串。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlInfoMessageEventHandler">
      <summary>表示将要处理 <see cref="T:System.Data.SqlClient.SqlConnection" /> 的 <see cref="E:System.Data.SqlClient.SqlConnection.InfoMessage" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Data.SqlClient.SqlInfoMessageEventArgs" /> 对象。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlParameter">
      <summary>表示 <see cref="T:System.Data.SqlClient.SqlCommand" /> 的参数，也可以是它到 <see cref="T:System.Data.DataSet" /> 列的映射。此类不能被继承。有关参数的更多信息，请参见 配置参数和参数数据类型。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType)">
      <summary>用参数名称和数据类型初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dbType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32)">
      <summary>用参数名称、<see cref="T:System.Data.SqlDbType" /> 和大小初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dbType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Data.SqlDbType,System.Int32,System.String)">
      <summary>用参数名称、<see cref="T:System.Data.SqlDbType" />、大小和源列名称初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="dbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <param name="size">参数的长度。</param>
      <param name="sourceColumn">如果此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在对 <see cref="Overload:System.Data.Common.DbDataAdapter.Update" /> 的调用中使用，则为源列 (<see cref="P:System.Data.SqlClient.SqlParameter.SourceColumn" />) 的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dbType" /> 参数中提供的值为无效的后端数据类型。</exception>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.#ctor(System.String,System.Object)">
      <summary>用参数名称和新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的一个值初始化 <see cref="T:System.Data.SqlClient.SqlParameter" /> 类的新实例。</summary>
      <param name="parameterName">要映射的参数的名称。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它是 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的值。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.CompareInfo">
      <summary>获取或设置 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象定义应如何为此参数执行字符串比较。</summary>
      <returns>一个 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象为此参数定义字符串比较。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.DbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.SqlDbType" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlDbType" /> 值之一。默认值为 NVarChar。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Direction">
      <summary>获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 值之一。默认值为 Input。</returns>
      <exception cref="T:System.ArgumentException">该属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.IsNullable">
      <summary>获取或设置一个值，该值指示参数是否接受空值。在执行命令时，<see cref="P:System.Data.SqlClient.SqlParameter.IsNullable" /> 不会用于验证参数的值且不会阻止发送或接收 null 值。</summary>
      <returns>如果接受 null 值，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.LocaleId">
      <summary>获取或设置可确定特定区域的约定和语言的区域设置标识符。</summary>
      <returns>返回与参数关联的区域设置标识符。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Offset">
      <summary>获取或设置对 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的偏移量。</summary>
      <returns>对 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的偏移量。默认值为 0。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.ParameterName">
      <summary>获取或设置 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。默认值为空字符串。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Precision">
      <summary>获取或设置用来表示 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的最大位数。</summary>
      <returns>用于表示 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 属性的最大位数。默认值为 0。这指示数据提供程序设置 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 的精度。</returns>
      <filterpriority>1</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ResetDbType">
      <summary>重置与此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 关联的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ResetSqlDbType">
      <summary>重置与此 <see cref="T:System.Data.SqlClient.SqlParameter" /> 关联的类型。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Scale">
      <summary>获取或设置 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 解析为的小数位数。</summary>
      <returns>要将 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> 解析为的小数位数。默认值为 0。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Size">
      <summary>获取或设置列中数据的最大大小（以字节为单位）。</summary>
      <returns>列中数据的最大大小（以字节为单位）。默认值是从参数值推导出的。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SourceColumn">
      <summary>获取或设置源列的名称，该源列映射到 <see cref="T:System.Data.DataSet" /> 并用于加载或返回 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /></summary>
      <returns>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。默认值为空字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SourceColumnNullMapping">
      <summary>设置或获取一个值，该值指示源列是否可以为 null。这样 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 便能够为可以为 null 的列正确生成 Update 语句。</summary>
      <returns>如果源列可以为 null，则为 true；如果不可以为 null，则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SqlDbType">
      <summary>获取或设置参数的 <see cref="T:System.Data.SqlDbType" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlDbType" /> 值之一。默认值为 NVarChar。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.SqlValue">
      <summary>获取作为 SQL 类型的参数的值，或设置该值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是使用 SQL 类型的参数的值。默认值为 null。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameter.ToString">
      <summary>获取一个包含 <see cref="P:System.Data.SqlClient.SqlParameter.ParameterName" /> 的字符串。</summary>
      <returns>一个包含 <see cref="P:System.Data.SqlClient.SqlParameter.ParameterName" /> 的字符串。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.TypeName">
      <summary>获取或设置表值参数的类型名称。</summary>
      <returns>指定表值参数的类型名称。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.Value">
      <summary>获取或设置该参数的值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它是该参数的值。默认值为 null。</returns>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionDatabase">
      <summary>获取此 XML 实例的架构集合所在的数据库的名称。</summary>
      <returns>此 XML 实例的架构集合所在的数据库的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionName">
      <summary>获取用于此 XML 实例的架构集合的名称。</summary>
      <returns>用于此 XML 实例的架构集合的名称。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameter.XmlSchemaCollectionOwningSchema">
      <summary>包含此 XML 实例的架构集合的关系架构。</summary>
      <returns>此 XML 实例拥有的关系架构。</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:System.Data.SqlClient.SqlParameterCollection">
      <summary>表示与 <see cref="T:System.Data.SqlClient.SqlCommand" /> 相关联的参数的集合以及各个参数到 <see cref="T:System.Data.DataSet" /> 中列的映射。此类不能被继承。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.Data.SqlClient.SqlParameter)">
      <summary>将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="value">要添加到集合中的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="value" /> 参数中指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 已经添加到这个或其他 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</exception>
      <exception cref="T:System.InvalidCastException">传递的参数不是 <see cref="T:System.Data.SqlClient.SqlParameter" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.Object)">
      <summary>将指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>新 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的索引。</returns>
      <param name="value">一个 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Data.SqlDbType)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameter" /> 添加到指定了参数名和数据类型的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="sqlDbType">
        <see cref="T:System.Data.SqlDbType" /> 值之一。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Add(System.String,System.Data.SqlDbType,System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameter" /> 添加到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中（给定了指定的参数名、<see cref="T:System.Data.SqlDbType" /> 和大小）。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="sqlDbType">要添加到集合中的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的 <see cref="T:System.Data.SqlDbType" />。</param>
      <param name="size">
        <see cref="T:System.Int32" /> 的大小。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddRange(System.Array)">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的末尾添加值数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Array" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddRange(System.Data.SqlClient.SqlParameter[])">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的末尾添加 <see cref="T:System.Data.SqlClient.SqlParameter" /> 值的数组。</summary>
      <param name="values">要添加的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的末尾添加值。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</returns>
      <param name="parameterName">参数的名称。</param>
      <param name="value">要添加的值。使用 <see cref="F:System.DBNull.Value" />（而不是 null）指示空值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Clear">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中移除所有 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.Data.SqlClient.SqlParameter)">
      <summary>确定指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Data.SqlClient.SqlParameter" /> 值。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否在此 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Contains(System.String)">
      <summary>确定指定的参数名是否在<see cref="T:System.Data.SqlClient.SqlParameterCollection" />。</summary>
      <returns>如果 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 包含该值，则为 true；否则为 false。</returns>
      <param name="value">
        <see cref="T:System.String" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>将当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的所有元素复制到指定的一维 <see cref="T:System.Array" /> 中（从指定的目标 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Array" /> 中复制开始处的索引。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.CopyTo(System.Data.SqlClient.SqlParameter[],System.Int32)">
      <summary>将当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的所有元素复制到指定的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" />，从指定的目标索引开始复制。</summary>
      <param name="array">
        <see cref="T:System.Data.SqlClient.SqlParameterCollection" />，它是从当前 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 复制的元素的目标位置。</param>
      <param name="index">一个 32 位整数，它表示 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中复制开始处的索引。</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Count">
      <summary>返回一个整数，其中包含 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中元素的数目。只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中以整数表示的元素的数目。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.Data.SqlClient.SqlParameter)">
      <summary>获取指定的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />（它是 <see cref="T:System.Data.SqlClient.SqlParameter" />）在集合中从零开始的位置。当 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="value">要查找的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.Object)">
      <summary>获取指定的 <see cref="T:System.Object" /> 在集合中的位置。</summary>
      <returns>指定的 <see cref="T:System.Object" />（它是 <see cref="T:System.Data.SqlClient.SqlParameter" />）在集合中从零开始的位置。当 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="value">要查找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.IndexOf(System.String)">
      <summary>获取具有指定名称的指定 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的位置。</summary>
      <returns>具有指定的区分大小写名称的指定 <see cref="T:System.Data.SqlClient.SqlParameter" /> 从零开始的位置。当 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中不存在该对象时，返回 -1。</returns>
      <param name="parameterName">要查找的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的区分大小写的名称。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Insert(System.Int32,System.Data.SqlClient.SqlParameter)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象插入 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入 value。</param>
      <param name="value">要插入到 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</param>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Insert(System.Int32,System.Object)">
      <summary>将 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 插入 <see cref="T:System.Object" /> 中的指定索引位置。</summary>
      <param name="index">从零开始的索引，应在该位置插入 value。</param>
      <param name="value">要在 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中插入的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Item(System.Int32)">
      <summary>获取指定索引处的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <returns>位于指定索引处的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</returns>
      <param name="index">要检索的参数的从零开始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不存在。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.Item(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <returns>具有指定名称的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</returns>
      <param name="parameterName">要检索的参数的名称。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定的 <paramref name="parameterName" /> 无效。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Remove(System.Data.SqlClient.SqlParameter)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象。</param>
      <exception cref="T:System.InvalidCastException">该参数不是 <see cref="T:System.Data.SqlClient.SqlParameter" />。</exception>
      <exception cref="T:System.SystemException">集合中不存在该参数。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.Remove(System.Object)">
      <summary>从集合中移除指定的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="value">要从集合中移除的对象。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.RemoveAt(System.Int32)">
      <summary>从指定索引处的 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中移除 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="index">要移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 对象的从零开始的索引。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlParameterCollection.RemoveAt(System.String)">
      <summary>从 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 中移除位于指定参数名称处的 <see cref="T:System.Data.SqlClient.SqlParameter" />。</summary>
      <param name="parameterName">要移除的 <see cref="T:System.Data.SqlClient.SqlParameter" /> 的名称。</param>
    </member>
    <member name="P:System.Data.SqlClient.SqlParameterCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlTransaction">
      <summary>表示要在 SQL Server 数据库中生成的 Transact-SQL 事务。此类不能被继承。</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Commit">
      <summary>提交数据库事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。- 或 -连接已断开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlClient.SqlTransaction.Connection">
      <summary>获取与该事务关联的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象，或者如果该事务不再有效，则为 null。</summary>
      <returns>与该事务关联的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 对象。</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.SqlClient.SqlTransaction.IsolationLevel">
      <summary>指定该事务的 <see cref="T:System.Data.IsolationLevel" />。</summary>
      <returns>该事务的 <see cref="T:System.Data.IsolationLevel" />。默认值为 ReadCommitted。</returns>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Rollback">
      <summary>从挂起状态回滚事务。</summary>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。- 或 -连接已断开。</exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess" />
        <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy, ControlAppDomain" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)">
      <summary>从挂起状态回滚事务，并指定事务或保存点名称。</summary>
      <param name="transactionName">要回滚的事务的名称，或要回滚到的保存点的名称。</param>
      <exception cref="T:System.ArgumentException">未指定事务名称。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。- 或 -连接已断开。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.SqlClient.SqlTransaction.Save(System.String)">
      <summary>在事务中创建保存点（它可用于回滚事务的一部分），并指定保存点名称。</summary>
      <param name="savePointName">保存点的名称。</param>
      <exception cref="T:System.Exception">尝试提交事务时出错。</exception>
      <exception cref="T:System.InvalidOperationException">事务已提交或回滚。- 或 -连接已断开。</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.SqlTypes.INullable">
      <summary>所有 <see cref="N:System.Data.SqlTypes" /> 对象和结构均实现 INullable 接口。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.INullable.IsNull">
      <summary>指示结构是否为 null。此属性为只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 如果此对象的值为空，则为 true。否则为 false。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBinary">
      <summary>表示要存储在数据库中或从数据库中检索的二进制数据的可变长度流。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的新实例，将 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性设置为已提供的字节数组的内容。</summary>
      <param name="value">要存储或检索的字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值以创建一个新的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />，为 x 和 y 的串联值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与所提供的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <returns>有符号的数，指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象的相对值。返回值条件小于零此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象的值小于该对象。零此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与对象相同。大于零此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象大于对象。- 或 -对象为 null 引用。</returns>
      <param name="value">要与此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象进行比较的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与所提供的对象进行比较，并返回其相对值的指示值。</summary>
      <returns>有符号的数，指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构和对象的相对值。返回值条件小于零此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象的值小于该对象。零此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象与对象相同。大于零此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象大于对象。- 或 -对象为 null 引用。</returns>
      <param name="value">要与此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构比较的对象。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串联两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>
        <paramref name="x" /> 和 <paramref name="y" /> 参数的串联值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlBinary 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构是否为 Null。此属性为只读。</summary>
      <returns>如果为 null，则返回 true。否则返回 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)">
      <summary>从 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性获取单字节，该属性位于整数参数 <paramref name="index" /> 指示的位置。如果 <paramref name="index" /> 指示位置位于字节数组的结尾以外，将引发 <see cref="T:System.Data.SqlTypes.SqlNullValueException" />。此属性为只读。</summary>
      <returns>位于整数参数指示的位置的字节。</returns>
      <param name="index">要检索的字节的位置。</param>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 时，读取该属性。- 或 -<paramref name="index" /> 参数指示超过字节数组长度（由 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性指示）的位置。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Length">
      <summary>获取 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性的长度（以字节为单位）。此属性为只读。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性中的二进制数据的长度。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 时，读取 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 属性。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBinary.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>串连两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数以创建一个新 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>
        <paramref name="x" /> 和 <paramref name="y" /> 参数的串联值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构转换为 <see cref="T:System.Byte" /> 数组。</summary>
      <returns>
        <see cref="T:System.Byte" /> 数组。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary">
      <summary>将字节数组转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构，它表示已转换的字节数组。</returns>
      <param name="x">要转换的字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToSqlGuid">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的此实例转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 对象转换为字符串。</summary>
      <returns>一个包含 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 的 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 的字符串。如果 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 为 null，字符串将包含“null”。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的值。此属性为只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构的值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当属性包含 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 时，读取 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 属性。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBoolean">
      <summary>表示要存储在数据库中或者从数据库中检索的整数值，为 1 或 0。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)">
      <summary>使用提供的布尔值初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的新实例。</summary>
      <param name="value">新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值，为 true 或 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)">
      <summary>使用指定的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的新实例。</summary>
      <param name="value">其值用于新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位 AND 运算。</summary>
      <returns>逻辑 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.ByteValue">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的以字节表示的值。</summary>
      <returns>表示 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值的字节。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象与所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <returns>有符号数，指示实例和值的相对值。值说明负整数此实例小于 <paramref name="value" />。零此实例等于 <paramref name="value" />。正整数此实例大于 <paramref name="value" />。- 或 -<paramref name="value" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象，或 null 引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构与指定对象进行比较，并返回它们的相对值指示。</summary>
      <returns>有符号数，指示实例和值的相对值。值说明负整数此实例小于 <paramref name="value" />。零此实例等于 <paramref name="value" />。正整数此实例大于 <paramref name="value" />。- 或 -<paramref name="value" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的对象，或 null 引用（在 Visual Basic 中为 Nothing）。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.False">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性的“假”值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsFalse">
      <summary>指示当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是否为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。</summary>
      <returns>如果 Value 为 False，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构是否为 Null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsTrue">
      <summary>指示当前 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 是否为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</summary>
      <returns>如果 Value 为 True，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.One">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性的 1 值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行 1 的求补运算。</summary>
      <returns>所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 1 的补码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位 AND 运算。</summary>
      <returns>逻辑 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对其操作数执行按位“或”运算。</summary>
      <returns>逻辑 OR 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>比较 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的参数执行按位“异或”(XOR) 运算。</summary>
      <returns>逻辑 XOR 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为布尔值。</summary>
      <returns>设置为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 的布尔值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)">
      <summary>可以使用“假”运算符来测试 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 以确定它是否为“假”。</summary>
      <returns>如果提供的参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 False，则返回 true；否则返回 false。</returns>
      <param name="x">要测试的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构进行比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>包含 0 或 1 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 值。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的字节值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 true；否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 执行 NOT 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，其 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 有以下几种情况：<see cref="F:System.Data.SqlTypes.SqlBoolean.True" />（参数为真时）、<see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />（参数为 null 时）和 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />（其他情况下）。</returns>
      <param name="x">将要对其执行 NOT 运算的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行 1 的求补运算。</summary>
      <returns>所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 1 的补码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)">
      <summary>可以使用“真”运算符来测试 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 以确定它是否为真。</summary>
      <returns>如果提供的参数 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为真，则返回 true；否则返回 false。</returns>
      <param name="x">要测试的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对两个指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构执行按位“或”运算。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，其“值”是按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)">
      <summary>将逻辑值的指定 <see cref="T:System.String" /> 表示形式转换为它的等效 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构，包含已分析的值。</returns>
      <param name="s">要转换的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 1。否则，新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 1。否则，新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 1。否则，新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 SqlInt16 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值为 1。否则，新 SqlInt16 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 SqlInt32 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值为 1。否则，新 SqlInt32 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 SqlInt64 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值为 true，则新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值为 1。否则，新 SqlInt64 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值为 true，则新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 1。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值为 false，则新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值既不是 1 也不是 0，则新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 值为 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true，则新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 1；否则新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，其值为 1 或 0。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值等于 true ，则  <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的值为 1。否则，新 <see cref="T:System.Data.SqlTypes.SqlString" />  结构的值为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为字符串。</summary>
      <returns>一个字符串，它包含 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的值。如果值为 null，字符串将包含“null”。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.True">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 属性的 true 值。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值。此属性为只读。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，则为 true；否则为 false。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>逻辑 XOR 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlByte">
      <summary>表示要存储在数据库中或从数据库中检索的 8 位无符号整数，此整数在 0 到 255 范围内。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)">
      <summary>使用指定的字节值初始化 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的新实例。</summary>
      <param name="value">要存储在新 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性中的字节值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 Value 属性包含加法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位 AND 运算。</summary>
      <returns>按位 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位“或”计算。</summary>
      <returns>按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)">
      <summary>将此实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)">
      <summary>将此实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以其第二个操作数。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlByte 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Object)">
      <summary>将提供的 <see cref="T:System.Object" /> 参数与 <see cref="T:System.Data.SqlTypes.SqlByte" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>二进制反码运算符对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含两个操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位 AND 运算。</summary>
      <returns>按位 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位“或”计算。</summary>
      <returns>按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以其第二个操作数。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" />，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为字节。</summary>
      <returns>一个字节，其值等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">要转换为字节的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 SqlInt64 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">一个 SqlMoney 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的数值。</returns>
      <param name="x">SqlString 类的实例。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 SqlBoolean 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性等于提供的参数。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的字节值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数除以第二个操作数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>二进制反码运算符对其 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数。</summary>
      <returns>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数所得的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 8 位无符号整数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，包含 String 参数表示的 8 位数字。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数。</summary>
      <returns>从第一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数中减去第二个操作数所得的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个 SqlDecimal 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 SqlDouble 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 SqlInt16 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 具有相同值的 SqlInt32 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个 SqlInt64 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 SqlMoney 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 SqlSingle 结构，它与此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构具有相同的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的此实例转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个字符串，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。如果 Value 为空，String 将为空字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值。此属性为只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>该 XOR 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBytes">
      <summary>表示包装 <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" /> 或 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" /> 的可变引用类型。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])">
      <summary>根据指定的字节数组初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
      <param name="buffer">无符号字节的数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)">
      <summary>根据指定的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)">
      <summary>根据指定的 <see cref="T:System.IO.Stream" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 类的新实例。</summary>
      <param name="s">
        <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Buffer">
      <summary>返回一个对内部缓冲区的引用。</summary>
      <returns>返回一个对内部缓冲区的引用。对于在非托管指针上创建的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例，将返回内部缓冲区的托管副本。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 是否为 null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 为 null，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Item(System.Int64)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 值。</returns>
      <param name="offset">一个 <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Length">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的长度。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，表示 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的长度。如果没有可由实例使用的缓冲区，或者如果该值为 null，则返回 -1。返回流包装实例的 <see cref="P:System.IO.Stream.Length" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.MaxLength">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的内部缓冲区的值的最大长度。</summary>
      <returns>一个长值，表示内部缓冲区的值的最大长度。对于流包装的 <see cref="T:System.Data.SqlTypes.SqlBytes" />，将返回 -1。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Null">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的 null 实例。</summary>
      <returns>按 <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" /> 返回 true 的方式返回一个实例。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlBytes">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</returns>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)~System.Data.SqlTypes.SqlBinary">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 结构。</returns>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中的字节复制到传入缓冲区中并返回复制的字节数。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 长值，表示已复制的字节数。</returns>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的 <see cref="T:System.Int64" /> 长值偏移量。</param>
      <param name="buffer">要在其中执行“复制到”操作的字节数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字节数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)">
      <summary>设置此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例的长度。</summary>
      <param name="value">表示长度的 <see cref="T:System.Int64" /> 长值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetNull">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例设置为 null。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Stream">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的数据作为流进行获取或设置。</summary>
      <returns>包含 SqlBytes 数据的流。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.ToSqlBinary">
      <summary>从此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例构造和返回一个 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>来自此实例的 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Value">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 保存的值的托管副本。</summary>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 的值，为字节数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>将传入缓冲区中的字节复制到此 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中。</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 实例中包含的值的 <see cref="T:System.Int64" /> 长值偏移量。</param>
      <param name="buffer">要在其中执行“复制到”操作的字节数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字节数。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 是一个可变引用类型，可包装 <see cref="T:System.Char" /> 数组或 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])">
      <summary>根据指定的字符数组初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> 数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)">
      <summary>根据指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlChars" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Buffer">
      <summary>返回一个对内部缓冲区的引用。</summary>
      <returns>返回一个对内部缓冲区的引用。对于在非托管指针上创建的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例，将返回内部缓冲区的托管副本。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 是否为 null。</summary>
      <returns>如果 <see cref="T:System.Data.SqlTypes.SqlChars" /> 为 null，则返回 true。否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Item(System.Int64)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Char" /> 值。</returns>
      <param name="offset">一个 <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Length">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中包含的值的长度。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指示 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中包含的值的长度（以字符为单位）。如果没有可由该实例使用的缓冲区，或者该值为 null，则返回 -1。返回流包装实例的 <see cref="P:System.IO.Stream.Length" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.MaxLength">
      <summary>获取内部缓冲区可保存的值的最大长度（以双字节字符为单位）。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，表示内部缓冲区的值的最大长度（以双字节为单位）。对于流包装的 <see cref="T:System.Data.SqlTypes.SqlChars" />，将返回 -1。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Null">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的 null 实例。</summary>
      <returns>按 <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" /> 返回 true 的方式返回一个实例。有关详细信息，请参阅处理 Null 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)~System.Data.SqlTypes.SqlString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</returns>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlChars">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlChars" /> 结构。</returns>
      <param name="value">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中的字符复制到传入缓冲区中，并返回复制的字符数。</summary>
      <returns>一个 <see cref="T:System.Int64" />long 值，表示已复制的字节数。</returns>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中所含值的 <see cref="T:System.Int64" />long 值偏移量。</param>
      <param name="buffer">向其复制的字符数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数值，表示要复制的字符数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)">
      <summary>设置此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例的长度。</summary>
      <param name="value">表示长度的 <see cref="T:System.Int64" />long 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetNull">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例设置为 null。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示形式。</summary>
      <returns>此类的 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Value">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 保存的值的托管副本。</summary>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 的值，为字符数组。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>将传入缓冲区中的字符复制到此 <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中。</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 实例中所含值的 long 值偏移量。</param>
      <param name="buffer">向其复制的字符数组缓冲区。</param>
      <param name="offsetInBuffer">缓冲区中的一个 <see cref="T:System.Int32" /> 整数偏移量，以启动“复制到”操作。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 整数，表示要复制的字符数。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlCompareOptions">
      <summary>为 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构指定比较选项值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort2">
      <summary>执行二进制排序。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreKanaType">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略假名类型。假名类型是指日语平假名和片假名字符，它们表示日语中的语音。平假名用于表示日语自有的短语和字词，而片假名用于表示从其他语言借用的字词，如“computer”或“Internet”。语音既可以用平假名也可以用片假名表示。如果选择该值，则认为一个语音的平假名字符等于同一语音的片假名字符。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreNonSpace">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略非空格组合字符，比如音调符号。Unicode 标准将组合字符定义为与基字符组合起来产生新字符的字符。非空格组合字符在呈现时本身不占用字符空间。有关非空格组合字符的更多信息，请参见位于 http://www.unicode.org 上的“Unicode Standard”（Unicode 标准）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreWidth">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较必须忽略字符宽度。例如，日语片假名字符可以写为全角或半角形式；如果选择该值，则认为写为全角形式的片假名字符等于写为半角形式的同一字符。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.None">
      <summary>为 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较指定默认选项设置。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDateTime">
      <summary>表示要存储在数据库中或从数据库中检索的日期和时间数据，值范围介于 1753 年 1 月 1 日到 9999 年 12 月 31 日之间，精度为 3.33 毫秒。<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构具有与其相应的 .NET Framework 类型 <see cref="T:System.DateTime" /> 不同的基础数据类型，该结构可以表示 12:00:00 AM 1/1/0001 和 11:59:59 PM 12/31/9999 之间的任何时间，精度可达到 100 毫微秒。<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实际上存储的是相对于 00:00:00 AM 1/1/1900 的差值。因此，将“00:00:00 AM 1/1/1900”转换为整数将返回 0。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="value">一个 DateTime 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="dayTicks">将日期表示为刻度数的整数值。</param>
      <param name="timeTicks">将时间表示为刻度数的整数值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>通过使用提供的参数初始化年、月、日，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>通过使用所提供的参数初始化新结构的年、月、日、小时、分钟和秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中月份的第几天的值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>通过使用所提供的参数初始化新结构的年、月、日、小时、分钟、秒和毫秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中月份的第几天的值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
      <param name="millisecond">一个双精度型值，表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的毫秒值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>通过使用提供的参数初始化新结构的年、月、日、小时、分钟和毫微秒，来初始化 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的新实例。</summary>
      <param name="year">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的年份值。</param>
      <param name="month">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的月份值。</param>
      <param name="day">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日值。</param>
      <param name="hour">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的小时值。</param>
      <param name="minute">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的分钟值。</param>
      <param name="second">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的秒钟值。</param>
      <param name="bilisecond">一个整数值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的毫微秒值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Add(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>向指定的 TimeSpan 添加一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">一个 Timespan 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构与提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。零此实例与 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 相同。大于零此实例大于 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。- 或 -<see cref="T:System.Data.SqlTypes.SqlDateTime" /> 为 null 引用（在 Visual Basic 中为 Nothing ）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构与提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是 null 引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.DayTicks">
      <summary>获取刻度数，它表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的日期。</summary>
      <returns>刻度数，表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性中包含的日期。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="N:System.Data.SqlTypes" /> 结构的 Value 属性设置为 null 时所引发的异常。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构是否为 Null。</summary>
      <returns>如果为 null，则返回 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MaxValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的最大有效日期值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MinValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的最小有效日期值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例执行逻辑比较，确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Addition(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>将提供的 <see cref="T:System.TimeSpan" /> 参数 <paramref name="t" /> 指示的一段时间添加到提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。如果任一参数为 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />，则新的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 将是 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="t">一个 <see cref="T:System.TimeSpan" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.DateTime">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.DateTime" /> 结构。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，其 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性与提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性包含相同的日期和时间值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDateTime">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的日期和时间。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 null，则新创建的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 Value 将为 Null。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)~System.Data.SqlTypes.SqlDateTime">
      <summary>将 <see cref="T:System.DateTime" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 等于提供的 <see cref="T:System.DateTime" /> 结构的 <see cref="P:System.DateTime.Date" /> 和 <see cref="P:System.DateTime.TimeOfDay" /> 属性的组合。</returns>
      <param name="value">一个 DateTime 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例执行逻辑比较，确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Subtraction(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>从提供的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中减去提供的 <see cref="T:System.TimeSpan" /> 结构 <paramref name="t" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它表示该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
      <param name="t">一个 <see cref="T:System.TimeSpan" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)">
      <summary>将日期和时间的指定的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 形式。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构，它等于指定的 string 表示的日期和时间。</returns>
      <param name="s">要分析的 string。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerHour">
      <summary>值为等效于 1 小时的刻度数的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerMinute">
      <summary>值为等效于 1 分钟的刻度数的常数。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerSecond">
      <summary>值为等效于 1 秒的刻度数的常数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Subtract(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>从此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 实例中减去指定的 Timespan。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 值。</param>
      <param name="t">一个 Timespan 值。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.TimeTicks">
      <summary>获取表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的时间的刻度数。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的时间的刻度数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString 结构，其值是表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构中包含的日期和时间的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 String，它表示此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的值。此属性为只读。</summary>
      <returns>此 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构的值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">当 <see cref="N:System.Data.SqlTypes" /> 结构的 Value 属性设置为 null 时所引发的异常。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDecimal">
      <summary>表示具有固定精度和小数位数的数值，该数值介于 - 10^38 +1 和 10^38 - 1 之间。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="bPrecision">可用来表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的最大位数。</param>
      <param name="bScale">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性将解析为的小数位数。</param>
      <param name="fPositive">一个布尔值，它指示新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是表示正数还是负数。</param>
      <param name="data1">一个 32 位无符号整数，它将与 data2、data3 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data2">一个 32 位无符号整数，它将与 data1、data3 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data3">一个 32 位无符号整数，它将与 data1、data2 和 data4 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
      <param name="data4">一个 32 位无符号整数，它将与 data1、data2 和 data3 结合，以组成一个 128 位无符号整数，该整数表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
      <summary>使用提供的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="bPrecision">可用来表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的最大位数。</param>
      <param name="bScale">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性将解析为的小数位数。</param>
      <param name="fPositive">一个布尔值，它指示新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是表示正数还是负数。</param>
      <param name="bits">128 位无符号整数，提供新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)">
      <summary>使用提供的 <see cref="T:System.Decimal" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="value">要作为 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构存储的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)">
      <summary>使用提供的 double 类型的参数初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="dVal">一个双精度型值，它表示新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)">
      <summary>使用提供的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="value">提供的整数值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)">
      <summary>使用提供的长整数值初始化 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的新实例。</summary>
      <param name="value">提供的长整型值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)">
      <summary>Abs 方法获取 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的绝对值。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的绝对值的无符号数字。</returns>
      <param name="n">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的小数位数调整为位数参数指示的位数。取决于 fRound 参数的值，该值将舍入到适当的位数或者截断。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含调整后的数字。</returns>
      <param name="n">要调整的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="digits">已调整的结构的位数。</param>
      <param name="fRound">如果此参数是 true，将舍入新值，如果为 false，将截断该值。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.BinData">
      <summary>以字节数组形式获取此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值的二进制表示形式。</summary>
      <returns>一个字节数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值的二进制表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)">
      <summary>返回大于或等于指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小整数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，表示大于或等于指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小整数。</returns>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，将要计算其最大值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 对象进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的值调整为指定精度和小数位数。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值已经调整为参数中指定的精度和小数位数。</returns>
      <param name="n">将要调整其值的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="precision">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的精度。</param>
      <param name="scale">新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的小数位数。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Data">
      <summary>以整数数组形式获取此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的二进制表示形式。</summary>
      <returns>一个整数数组，其中包含此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的二进制表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该除法运算符计算将第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数所得的结果。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlDecimal 的值将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)">
      <summary>将提供的 <see cref="T:System.Object" /> 参数与 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的实例并且两者相等，则为 true。否则为 false。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 数字舍入为下一个较小的整数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的整数部分。</returns>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，将要计算其最小值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构是否为 Null。</summary>
      <returns>如果此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构为 null，则为 true。否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsPositive">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 是否大于零。</summary>
      <returns>如果将 Null 赋给了 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />，则为 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否小于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxPrecision">
      <summary>一个常数，它表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" /> 属性的可能的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxScale">
      <summary>一个常数，它表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 类的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该除法运算符计算将第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数除以第二个操作数所得的结果。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDecimal">
      <summary>将所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Decimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>一个新 Decimal 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Double" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的值等于 <see cref="T:System.Double" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Double" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否大于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDecimal">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 SqlDecimal。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 操作数转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlDecimal">
      <summary>将 <see cref="T:System.Decimal" /> 值转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 Decimal 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlDecimal">
      <summary>将所提供的 <see cref="T:System.Int64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性等于 <see cref="T:System.Int64" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构执行逻辑比较，以确定第一个结构是否小于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算从第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数中减去第二个操作数所得的结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的“值”属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数求反。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其值包含求反的结果。</returns>
      <param name="x">需求反的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 形式。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值乘到指定的幂。</summary>
      <returns>一个包含结果的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</returns>
      <param name="n">要乘幂的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="exp">一个 double 类型值，指示数字应乘到的幂。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Precision">
      <summary>获取用于表示 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的最大位数。</summary>
      <returns>用于表示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 Value 的最大位数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>以指定精度获取与指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值最接近的数字。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其中包含该舍入运算的结果。</returns>
      <param name="n">要舍入的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="position">返回值中的有效小数位数（精度）。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Scale">
      <summary>获取 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 解析为的小数位数。</summary>
      <returns>Value 属性解析后的小数位数。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)">
      <summary>获取一个值，该值指示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的符号。</summary>
      <returns>一个指示 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的符号的数字。</returns>
      <param name="n">要计算其符号的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>计算从第一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 操作数中减去第二个操作数所得的结果。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，它的“值”属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToDouble">
      <summary>返回等于此实例的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的内容的双精度型值。</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的小数表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 Value。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值为 true，则 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 1。否则，<see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其值与此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 实例的值相同。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，它的值是一个表示此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构中包含的值的字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个新的 <see cref="T:System.String" /> 对象，其中包含 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性的字符串表示形式。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>将指定 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值截断到希望的位置。</summary>
      <returns>为 <paramref name="position" /> 参数提供一个负值，以便将该值截断到小数点左侧对应的位置。</returns>
      <param name="n">要截断的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
      <param name="position">数字将要截断到的小数位置。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构的值。此属性为只读。</summary>
      <returns>介于 -79,228,162,514,264,337,593,543,950,335 到 79,228,162,514,162,514,264,337,593,543,950,335 之间的数字。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDouble">
      <summary>表示要存储在数据库中或从数据库中检索的浮点数字，该数字介于 -1.79E+308 到 1.79E+308 的范围内。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)">
      <summary>通过使用提供的双精度型参数设置新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性，从而初始化 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的新实例。</summary>
      <param name="value">一个双精度型值，其值用于新 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该加法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</summary>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing ）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 属性进行比较。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.IsNull">
      <summary>返回一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 实例是否为 null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为 null，则返回 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MaxValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MinValue">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的最小可能值的常数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</summary>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定它们是否不等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该加法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</summary>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数除以第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble">
      <summary>将所提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为 0 或 1，取决于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。如果 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为双精度型值。</summary>
      <returns>等效于指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值的双精度型值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，其 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 表示的数值。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 为 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。如果 <see cref="T:System.Data.SqlTypes.SqlByte" /> 为 <see cref="F:System.Data.SqlTypes.SqlByte.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。如果 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 为 <see cref="F:System.Data.SqlTypes.SqlDecimal.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt16.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 为 <see cref="F:System.Data.SqlTypes.SqlInt64.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 为 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 为 <see cref="F:System.Data.SqlTypes.SqlSingle.Null" />，则 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构将为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble">
      <summary>将提供的字节值转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>与指定双精度型参数具有相同值的 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</returns>
      <param name="x">要转换的双精度型值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</summary>
      <returns>两个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数中减去第二个操作数。</summary>
      <returns>该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)">
      <summary>返回指定 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的求反值。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效双精度浮点数字。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlDouble" />，包含 String 所表示的值。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 操作数中减去第二个操作数。</summary>
      <returns>该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 SqlBoolean 结构，如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 为非零，其 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将是 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />；如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 为零，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />；如果 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构为 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 SqlByte 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的 Value。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 SqlDecimal 结构，其转换后的值等于此 SqlDouble 的舍入值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 Value 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 Value 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 Value 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构值的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 SqlMoney 结构，其 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 SqlSingle 结构，其 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 SqlString，表示此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为字符串。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。此属性为只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构的值。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlGuid">
      <summary>表示要存储在数据库中或要从数据库中检索的 GUID。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])">
      <summary>使用提供的字节数组参数初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="value">字节数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)">
      <summary>使用指定的 <see cref="T:System.Guid" /> 参数初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="g">一个 <see cref="T:System.Guid" /></param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的值初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="a">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的开头四个字节。</param>
      <param name="b">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下两个字节。</param>
      <param name="c">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下两个字节。</param>
      <param name="d">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="e">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="f">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="g">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="h">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="i">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="j">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
      <param name="k">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的下一个字节。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)">
      <summary>使用指定的 <see cref="T:System.String" /> 参数初始化 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的新实例。</summary>
      <param name="s">一个 <see cref="T:System.String" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构与所提供的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 进行比较，并返回其相对值的指示值。不仅仅是比较最后 6 个字节，但会将最后 6 个字节视为比较中最重要的字节。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于对象。零此实例等于对象。大于零此实例大于对象- 或 -对象是 null 引用 (Nothing)。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构与所提供的对象进行比较，并返回其相对值的指示。不仅仅是比较最后 6 个字节，但会将最后 6 个字节视为比较中最重要的字节。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于对象。零此实例等于对象。大于零此实例大于对象- 或 -对象是 null 引用 (Nothing)</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlGuid 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetHashCode">
      <summary>返回此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlGuid.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlGuid">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlGuid" />，它的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />。</returns>
      <param name="x">一个 SqlBinary 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Guid">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数转换为 <see cref="T:System.Guid" />。</summary>
      <returns>一个新 <see cref="T:System.Guid" />，它等于 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlGuid">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否大于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)~System.Data.SqlTypes.SqlGuid">
      <summary>将提供的 <see cref="T:System.Guid" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlGuid" />，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 等于 <see cref="T:System.Guid" /> 参数。</returns>
      <param name="x">
        <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的两个实例进行比较，以确定第一个实例是否小于或等于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Parse(System.String)">
      <summary>将指定的 <see cref="T:System.String" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlGuid" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToByteArray">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为字节数组。</summary>
      <returns>一个字节数组，表示此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlBinary">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBinary" />。</summary>
      <returns>一个 SqlBinary 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构中的字节。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 结构，包含 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构的值。此属性为只读。</summary>
      <returns>一个 <see cref="T:System.Guid" /> 结构。</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt16">
      <summary>表示要在数据库中存储或检索的 16 位有符号整数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)">
      <summary>使用提供的短整型参数初始化 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的新实例。</summary>
      <param name="value">短整型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -对象为 null 引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlInt16 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)">
      <summary>将指定对象与 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构是否为 Null。</summary>
      <returns>如果为 null，则返回 true。否则为 false。有关详细信息，请参阅处理 Null 值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 运算符对它的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位 AND 运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Int16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为短整型。</summary>
      <returns>短整型，其值等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象参数表示的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否大于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)~System.Data.SqlTypes.SqlInt16">
      <summary>将提供的短整型转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>与指定的短整型具有相同值的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</returns>
      <param name="x">短整型值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的两个实例进行比较，以确定第一个实例是否小于第二个实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构进行比较，以确定第一个结构是否小于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算将其第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数除以第二个操作数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 包含两个参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 运算符对它的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 操作数执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数中减去第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 操作数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 16 位有符号整数。</summary>
      <returns>一个 16 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数中减去第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的值小于 0 或大于 255，则将发生 <see cref="T:System.OverflowException" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的此实例的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 对象，它表示 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 的此实例的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的此实例的值。此属性为只读。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构的值的短整型。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构，它包含该“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt32">
      <summary>表示要在数据库中存储或检索的 32 位有符号整数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)">
      <summary>使用提供的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的新实例。</summary>
      <param name="value">要转换的整数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlInt32 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构是否为 Null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 为 Null，则此属性为 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MaxValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的最大可能值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MinValue">
      <summary>一个常数，它表示 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的最小可能值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 类的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含二进制求补运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含指定 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Int32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为整数。</summary>
      <returns>已转换的整数值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 SqlInt64 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 属性转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)~System.Data.SqlTypes.SqlInt32">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 转换为整数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，其 Value 属性等于整数参数。</returns>
      <param name="x">一个整数值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数进行比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 包含两个参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位二进制反码运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含二进制求补运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数中减去第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)">
      <summary>对 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 操作数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 32 位有符号整数。</summary>
      <returns>一个 32 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数中减去第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的 Value。如果 SqlInt32 的值小于 0 或大于 255，则将发生 <see cref="T:System.OverflowException" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" /> 结构等于此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值。此属性为只读。</summary>
      <returns>表示此 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构的值的整数。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">此属性包含 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />。</exception>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>对指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>表示要在数据库中存储或检索的 64 位有符号整数。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>使用提供的长整型初始化 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的新实例。</summary>
      <param name="value">长整型。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing ）。</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlInt64 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的实例并且两者相等，则为 true；否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>获取一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的可能的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>一个常数，表示 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的可能的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值相除，并返回余数。</summary>
      <returns>对 <paramref name="x" /> 和 <paramref name="y" /> 执行除法运算后得到的余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 SqlInt64 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>对它的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位二进制反码运算。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“与”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对其两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位“或”计算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为长值。</summary>
      <returns>一个新长值，它等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的整数部分。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>将长参数转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于长参数的值。</returns>
      <param name="x">长整型值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 SqlInt64 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算将第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数除以第二个参数后所得的余数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性包含该余数。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于两个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>对它的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数执行按位二进制反码运算。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的二进制反码。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 操作数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的求反 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为它的等效 64 位有符号整数。</summary>
      <returns>一个 64 位有符号整数，它等效于指定的 <see cref="T:System.String" /> 中包含的值。</returns>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性等于该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的 Value。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的此实例转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值。此属性为只读。</summary>
      <returns>一个长整型，表示此 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>对提供的参数执行按位“异或”运算。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构，它包含按位“异或”运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构实例的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>表示要存储在数据库中或要从数据库中检索的货币值，范围介于 -2 63（或 -922,337,203,685,477.5808）到 2 63 -1（或 +922,337,203,685,477.5807）之间，精度为千分之十货币单位。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>使用指定的 <see cref="T:System.Decimal" /> 值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>使用指定的双精度型值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>用指定的整数值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>使用指定的长整型值初始化 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的新实例。</summary>
      <param name="value">要初始化的货币值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlMoney 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的实例并且两者相等，则相等比较将返回 true；否则返回 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>返回一个布尔值，该值指示此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构是否为 null。</summary>
      <returns>如果为 null，则返回 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该乘法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>除法运算符将第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数除以第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Decimal" />。</summary>
      <returns>一个新 <see cref="T:System.Decimal" /> 结构，它的值等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>此运算符将 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 属性。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否大于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>将 <see cref="T:System.Decimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 等于 <see cref="T:System.Decimal" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>此隐式运算符可将所提供的 <see cref="T:System.Int64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性等于 <see cref="T:System.Int64" /> 参数的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Int64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>乘法运算符计算两个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的乘积。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含该乘法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>一元负运算符对 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 包含求反的结果。</returns>
      <param name="x">需求反的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>将数字的 <see cref="T:System.String" /> 表示形式转换为其等效的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 形式。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlMoney" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 String。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>该减法运算符从第一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数中减去第二个参数。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构，它包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的此实例的值转换为 <see cref="T:System.Decimal" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Decimal" /> 结构，它的值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Double" />。</summary>
      <returns>一个双精度型，它的值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Int32" />。</summary>
      <returns>一个 32 位整数，其值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的值转换为 <see cref="T:System.Int64" />。</summary>
      <returns>一个 64 位整数，其值等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的整数部分。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。如果 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的值为零，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构的值将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构，它的值是一个表示此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值的字符串。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的此实例转换为字符串。</summary>
      <returns>一个字符串，它的值是此 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 的值的字符串表示形式。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>获取 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的实例的货币值。此属性为只读。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构的实例的货币值。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">该属性设置为 null。</exception>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>当 <see cref="N:System.Data.SqlTypes" /> 结构的 Value 属性设置为 null 时所引发的异常。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>表示要存储在数据库中或从数据库中检索的浮点数，范围在 -3.40E+38 到 3.40E+38 之间。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>使用提供的 double 类型的参数初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">一个双精度型值，它将用作新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的新实例。</summary>
      <param name="value">一个浮点数，它将用作新 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 实例与所提供的 <see cref="T:System.Object" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构除以第二个结构。</summary>
      <returns>一个 SqlInt64 结构，包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlSingle 将为 null。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的实例并且两者相等，则为 true。否则为 false。</returns>
      <param name="value">要比较的对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构执行逻辑比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构是否为 Null。</summary>
      <returns>如果为 null，则返回 true。否则为 false。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的最大值。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的最小值。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的和。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>将第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构除以第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该除法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 SqlSingle 参数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将提供的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为浮点型。</summary>
      <returns>一个 float 类型值，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值。</returns>
      <param name="x">要转换为浮点型的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数表示的值。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构执行逻辑比较，以确定第一个结构是否大于或等于第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>此隐式运算符将 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性等于 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>将提供的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，它的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 等于 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>将指定的浮点值转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含指定浮点型的值。</returns>
      <param name="x">要转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的浮点值。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数执行逻辑比较，以确定第一个参数是否小于或等于第二个参数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的任一实例为 null，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>计算两个指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的乘积。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该乘法运算的乘积。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构中减去第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>对指定 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 求反。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含求反的值。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>将指定 <see cref="T:System.String" /> 转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" />，它与指定的 <see cref="T:System.String" /> 中包含的值等效。</returns>
      <param name="s">要分析的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>从第一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构中减去第二个结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构，包含该减法运算的结果。</returns>
      <param name="x">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
      <param name="y">一个 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构，其 Value 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的 Value。如果 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值为 true，则 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 1。否则，<see cref="T:System.Data.SqlTypes.SqlByte" /> 结构的 Value 将为 0。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>新 SqlDecimal 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>新的 SqlDouble 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>新的 SqlInt16 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>新的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，表示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构转换为 <see cref="T:System.String" />。</summary>
      <returns>一个表示此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 的值的 String 对象。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构的值。此属性为只读。</summary>
      <returns>一个浮点值，介于 -3.40E+38 到 3.40E+38 的范围内。</returns>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>表示可分配给 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 类实例的 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 属性的零值。</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>表示要存储在数据库中或从数据库中检索的字符的可变长度流。<see cref="T:System.Data.SqlTypes.SqlString" /> 具有与其相应的 .NET Framework <see cref="T:System.String" /> 数据类型不同的基础数据结构。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>使用指定的区域设置 ID、比较选项和数据，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="fUnicode">如果是 Unicode 编码，则为 true。否则为 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">数组中的起始索引。</param>
      <param name="count">要从索引复制的字符数。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 类的新实例。</summary>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <param name="data">要存储的数据数组。</param>
      <param name="index">数组中的起始索引。</param>
      <param name="count">要从索引复制的字符数。</param>
      <param name="fUnicode">如果是 Unicode 编码，则为 true。否则为 false。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>使用指定的字符串和区域设置 ID 值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>使用指定字符串、区域设置 ID 和比较选项值，初始化 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的新实例。</summary>
      <param name="data">要存储的字符串。</param>
      <param name="lcid">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</param>
      <param name="compareOptions">指定新 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串联两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 值以创建一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它是 <paramref name="x" /> 与 <paramref name="y" /> 的串联值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>指定排序应基于字符数值（而非其字母值）。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>创建此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的一个副本。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，其中所有的属性值都与原始值相同。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>获取 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象定义如何对此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构执行字符串比较。</summary>
      <returns>一个 CompareInfo 对象，该对象定义此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的字符串比较。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>获取与指定 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值等效的 <see cref="T:System.Globalization.CompareOptions" /> 枚举。</summary>
      <returns>一个 CompareOptions 值，该值对应于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的 SqlCompareOptions。</returns>
      <param name="compareOptions">一个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 值，该值描述此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较选项。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 实例与所提供的 <see cref="T:System.Data.SqlTypes.SqlString" /> 进行比较，并返回二者相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）。</returns>
      <param name="value">要比较的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象与所提供的 <see cref="T:System.Object" /> 进行比较，并返回其相对值的指示值。</summary>
      <returns>一个有符号的数字，它指示该实例和对象的相对值。返回值条件小于零此实例小于该对象。零此实例等于该对象。大于零此实例大于该对象- 或 -该对象是空引用（在 Visual Basic 中为 Nothing）</returns>
      <param name="value">要比较的 <see cref="T:System.Object" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串连两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它包含表示两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数内容的新串联的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>获取 <see cref="T:System.Globalization.CultureInfo" /> 结构，它表示有关此 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的区域性信息。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" /> 结构，描述有关此 SqlString 结构的区域性的信息，包括区域性的名称、书写体系和使用的日历，还包括对特定于区域性对象的访问，这些对象提供常规运算的方法，例如格式化日期和排序字符串。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>如果两个值相等，则为 true。否则为 false。如果任一实例为 null，则 SqlString 将为 null。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>将提供的对象参数与 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性进行比较。</summary>
      <returns>如果对象是 <see cref="T:System.Data.SqlTypes.SqlString" /> 的实例并且两者相等，则相等比较将返回 true；否则返回 false。</returns>
      <param name="value">要比较的对象。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>获取此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>获取字节的数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlString" /> ANSI 格式的内容。</summary>
      <returns>一个字节数组，包含 <see cref="T:System.Data.SqlTypes.SqlString" /> ANSI 格式的内容。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>获取字节的数组，其中包含 <see cref="T:System.Data.SqlTypes.SqlString" /> Unicode 格式的内容。</summary>
      <returns>一个字节数组，包含 <see cref="T:System.Data.SqlTypes.SqlString" /> Unicode 格式的内容。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 比较应忽略大小写。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>指定字符串比较必须忽略假名类型。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>指定字符串比较必须忽略非空格组合字符，比如音调符号。</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>指定字符串比较必须忽略字符宽度。</summary>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>指示此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构是否为 Null。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 为 <see cref="F:System.Data.SqlTypes.SqlString.Null" />，则返回 true。否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>指定 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的地理区域设置和语言。</summary>
      <returns>存储在 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性中的字符串的区域设置 ID。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>表示可指派给 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的此实例的 <see cref="T:System.DBNull" />。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>串连两个指定的 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它包含表示两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数内容的新串联的值。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlByte" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlByte" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 SqlDecimal 参数的字符串表示形式。</returns>
      <param name="x">要转换的 SqlDecimal 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，它的值是指定的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 SqlInt32 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象，包含 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>将指定的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlString" />，包含 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 参数的字符串表示形式。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 结构。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 转换为 <see cref="T:System.String" />。</summary>
      <returns>一个 String，它的内容与 <see cref="T:System.Data.SqlTypes.SqlString" /> 参数的 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 属性相同。</returns>
      <param name="x">要转换的 <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否大于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例大于或等于第二个实例，则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>将 <see cref="T:System.String" /> 参数转换为 <see cref="T:System.Data.SqlTypes.SqlString" />。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlString" />，包含指定的 String 的值。</returns>
      <param name="x">要转换的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定它们是否不相等。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，它在两个实例不等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />，在两个实例相等时为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>对两个 <see cref="T:System.Data.SqlTypes.SqlString" /> 操作数执行逻辑比较，以确定第一个操作数是否小于或等于第二个操作数。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlBoolean" />，如果第一个实例小于或等于第二个实例，则它为 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />。否则为 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />。如果 <see cref="T:System.Data.SqlTypes.SqlString" /> 的任一实例为空，则 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 的 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 将为 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />。</returns>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />。</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
      </PermissionSet>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>一个或多个 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 枚举值的组合，它们表示此 <see cref="T:System.Data.SqlTypes.SqlString" /> 与其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构的比较方式。</summary>
      <returns>一个值，它指定如何将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 与其他 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构进行比较。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlBoolean" />。</summary>
      <returns>如果 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 不是零，则为 true；如果为零，则为 false；否则为 Null。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlByte" />。</summary>
      <returns>一个新的 SqlByte 结构，它的 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构所表示的数字。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDateTime" />。</summary>
      <returns>一个新的 SqlDateTime 结构，其中包含此 <see cref="T:System.Data.SqlTypes.SqlString" /> 所表示的日期值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDecimal" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDecimal" />，其中包含此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的值。</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlDouble" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlDouble" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlGuid" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 结构，其 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 是此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构所表示的 Guid。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt16" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt16" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt32" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt32" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlInt64" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlInt64" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlMoney" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlMoney" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>将此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构转换为 <see cref="T:System.Data.SqlTypes.SqlSingle" />。</summary>
      <returns>一个新的 <see cref="T:System.Data.SqlTypes.SqlSingle" />，它等于此 <see cref="T:System.Data.SqlTypes.SqlString" /> 的数值。</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
      </PermissionSet>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>将 <see cref="T:System.Data.SqlTypes.SqlString" /> 对象转换为 <see cref="T:System.String" />。</summary>
      <returns>与此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构具有相同值的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>获取存储在此 <see cref="T:System.Data.SqlTypes.SqlString" /> 结构中的字符串。此属性为只读。</summary>
      <returns>存储的字符串。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">字符串的值是 <see cref="F:System.Data.SqlTypes.SqlString.Null" />。</exception>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>在将值设置到 <see cref="N:System.Data.SqlTypes" /> 结构中会截断该值时引发的异常。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对 <see cref="T:System.Exception" /> 的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
      <param name="e">对内部 <see cref="T:System.Exception" /> 的引用。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> 的基异常类。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误信息。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>表示存储在服务器中的或从服务器中检索的 XML 数据。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例。</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，以提供来自所提供的 <see cref="T:System.IO.Stream" /> 派生实例中的 XML 值。</summary>
      <param name="value">一个 <see cref="T:System.IO.Stream" /> 派生实例（如 <see cref="T:System.IO.FileStream" />），要从该实例加载 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 XML 内容。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>创建一个新的 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例，并将其与提供的 <see cref="T:System.Xml.XmlReader" /> 的内容关联起来。</summary>
      <param name="value">一个要用作新 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的值的 <see cref="T:System.Xml.XmlReader" /> 派生类实例。</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>作为 <see cref="T:System.Xml.XmlReader" /> 来获取此 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的 XML 内容的值。</summary>
      <returns>一个包含 XML 内容的 <see cref="T:System.Xml.XmlReader" /> 派生实例。根据信息的内部表示方式，服务器上的实际类型会有所不同（例如，返回值可能为 <see cref="T:System.Xml.XmlTextReader" />）。</returns>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">曾尝试访问 <see cref="T:System.Data.SqlTypes.SqlXml" /> 的 null 实例上的此属性。</exception>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>指示此实例是否表示一个 null <see cref="T:System.Data.SqlTypes.SqlXml" /> 值。</summary>
      <returns>如果 Value 为 null，则为 true。否则为 false。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>表示 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型的 null 实例。</summary>
      <returns>一个 <see cref="T:System.Data.SqlTypes.SqlXml" /> 类型的 null 实例。</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>获取此 <see cref="T:System.Data.SqlTypes.SqlXml" /> 实例的 XML 内容的字符串表示形式。</summary>
      <returns>XML 内容的字符串表示形式。</returns>
    </member>
  </members>
</doc>